#+TITLE: mu4e Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz

* License
  All code sections in this =.org= file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains configuration for [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]].
  It is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].

* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
;;; init-mu4e.el --- mu4e initialization

;;; Commentary:
;; This file is tangled from init-mu4e.org.
;; Changes made here will be overwritten by changes to that Org-mode file.

;;; Code:
   #+END_SRC

** Load =mu4e= with =use-package=
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package mu4e
       :demand                               ; do not defer loading

       :straight nil                    ; do not download using straight.el

       :load-path            ; add the following directories to `load-path'
       ("site-lisp/mu4e")

       :defines   ; variables provided by the parent package and used below
       (mu4e-compose-signature
        mu4e-compose-signature-auto-include
        mu4e-user-mail-address-list
        mu4e-archive-folder
        mu4e-compose-format-flowed
        mu4e-compose-in-new-frame
        mu4e-compose-signature-auto-include
        mu4e-contexts
        mu4e-drafts-folder
        mu4e-get-mail-command
        mu4e-headers-date-format
        mu4e-sent-folder
        mu4e-trash-folder
        mu4e-user-mail-address-list
        mu4e-view-show-addresses)

       :commands   ; commands provided by the parent package and used below
       (mu4e-message-field
        make-mu4e-context)

       :init            ; code to execute before loading the parent package
       <<mu4e-init>>

       :config
       <<mu4e-config>>
       )
   #+END_SRC

*** Pre-Load Execution
    :PROPERTIES:
    :noweb-ref: mu4e-init
    :END:

**** Fetching Mail
     #+BEGIN_SRC emacs-lisp
       (setq mu4e-get-mail-command "mbsync -a")
     #+END_SRC

**** Composing Mail
     #+BEGIN_SRC emacs-lisp
       (setq
        ;; Use format=flowed (https://joeclark.org/ffaq.html)
        mu4e-compose-format-flowed t
        ;; Open a new frame for composing mail.
        mu4e-compose-in-new-frame t
        ;; Automatically include a signature, if one is set.
        mu4e-compose-signature-auto-include t)
     #+END_SRC

**** Mail Headers
     #+BEGIN_SRC emacs-lisp
       (setq
        ;; Use ISO-esque timestamps in the header.
        mu4e-headers-date-format "%Y-%m-%d %H:%M"
        ;; Show senders' full addresses in message view.
        mu4e-view-show-addresses t)
     #+END_SRC

**** Mail Directory
     Set the path to my mail directory.

     #+BEGIN_SRC emacs-lisp
       (let ((maildir (getenv "MAILDIR")))
         (when maildir
           (setq mu4e-maildir maildir)))
     #+END_SRC

**** Sending Mail
     #+BEGIN_SRC emacs-lisp
       (setq
        message-send-mail-function 'smtpmail-send-it
        send-mail-function 'smtpmail-send-it
        smtpmail-smtp-service 587              ; port number
        smtpmail-stream-type 'starttls)        ; type of connection
     #+END_SRC

**** My Addresses
     mu4e maintains a list of addresses whose presence in a message's From field means that the message was sent by me.
     In such cases, display the To address(es).

     #+BEGIN_SRC emacs-lisp
       (setq mu4e-user-mail-address-list '("admin@lafreniere.xyz"
                                           "jml140230@utdallas.edu"
                                           "joseph.lafreniere@utdallas.edu"
                                           "joseph@lafreniere.xyz"
                                           "lafrenierejm@gmail.com"
                                           "lafrenierejm@utdallas.edu"))
     #+END_SRC


*** Post-Load Execution
    :PROPERTIES:
    :noweb-ref: mu4e-config
    :END:
**** Multiple Accounts
     #+BEGIN_SRC emacs-lisp
       (setq mu4e-contexts
             `( ,(make-mu4e-context
                  ;; Name of the context
                  :name "edu.utdallas@jml140230"
                  ;; alist of variables to set for this context.
                  :vars '((user-full-name . "LaFreniere, Joseph")
                          (user-mail-address . "jml140230@utdallas.edu")
                          ;; SMTP
                          (smtpmail-smtp-server . "smtp.office365.com") ; hostname
                          (smtpmail-smtp-user . "jml140230@utdallas.edu") ; username
                          ;; Signature
                          (mu4e-compose-signature-auto-include . t)
                          (mu4e-compose-signature . "Joseph LaFreniere")
                          ;; Folders
                          (mu4e-archive-folder . "/edu.utdallas.jml140230/archive")
                          (mu4e-drafts-folder . "/edu.utdallas.jml140230/draft")
                          (mu4e-sent-folder .  "/edu.utdallas.jml140230/sent")
                          (mu4e-trash-folder . "/edu.utdallas.jml140230/trash"))
                  ;; =match-func= returns true when the passed message matches this context.
                  :match-func (lambda (msg)
                                (when msg
                                  (mu4e-message-field msg :maildir)
                                  (string-prefix-p "/edu.utdallas.jml140230"
                                                   (mu4e-message-field msg :maildir)))))
                ,(make-mu4e-context
                  ;; Name of the context
                  :name "xyz.lafreniere@joseph"
                  ;; alist of variables to set for this context.
                  :vars '(
                          ;; From
                          (user-full-name . "LaFreniere, Joseph")
                          (user-mail-address . "joseph@lafreniere.xyz")
                          ;; Signature
                          (mu4e-compose-signature-auto-include . t)
                          (mu4e-compose-signature . "Joseph LaFreniere")
                          ;; SMTP
                          (smtpmail-smtp-server . "smtp.kolabnow.com") ; hostname
                          (smtpmail-smtp-user . "joseph@lafreniere.xyz") ; username
                          ;; Folders
                          (mu4e-archive-folder . "/xyz.lafreniere.joseph/archive")
                          (mu4e-drafts-folder . "/xyz.lafreniere.joseph/draft")
                          (mu4e-sent-folder .  "/xyz.lafreniere.joseph/sent")
                          (mu4e-trash-folder . "/xyz.lafreniere.joseph/trash"))
                  ;; =match-func= returns true when the passed message matches this context.
                  :match-func (lambda (msg)
                                (when msg
                                  (mu4e-message-field msg :maildir)
                                  (string-prefix-p "/xyz.lafreniere.joseph"
                                                   (mu4e-message-field msg :maildir)))))))
     #+END_SRC



** Evil Integration with =evil-mu4e=
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package evil-mu4e
       :demand                      ; do not defer loading

       :after        ; load the parent package after the following packages
       (evil mu4e))
   #+END_SRC

** Attachment Reminders
   The following code is taken from Marcin Borkowski's 2016-02-06 post [[http://mbork.pl/2016-02-06_An_attachment_reminder_in_mu4e]["An attachment reminder in mu4e"]].
   Borkowski's post links to the [[https://github.com/mbork/message][mbork/message]] repository on GitHub as the host for the attachment reminder code.
   Interestingly, the repository appears to contain neither the attachment code nor any commits that hint at the code having ever been committed into the repository's =mbork-message= package.
   Despite the attachment code never having (publically) been a part of mbork/message, I have decided to attribute it to Borkowsi under the same GPLv2 license as =mbork-message= given the blog's indication that the attachment code was /intended/ to have been included as part of =mbork-message=.

   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; The following code is derived from code written by Marcin
     ;; Borkowski (alias mbork):
     ;; http://mbork.pl/2016-02-06_An_attachment_reminder_in_mu4e.
     ;;
     ;; The above blog post indicates that Borkowski's code was intended to
     ;; be included in the =mbork-message= package:
     ;; https://github.com/mbork/message/blob/HEAD/mbork-message.el.  As
     ;; such, the following code inherits =mbork-message='s GPLv2 license:
     ;; https://www.gnu.org/licenses/gpl-2.0.html.

     (defun mbork/message-attachment-present-p ()
       "Return t if an attachment is found in the current message."
       (save-excursion
         (save-restriction
           (widen)
           (goto-char (point-min))
           (when (search-forward "<#part" nil t)
             t))))

     (defcustom mbork/message-attachment-intent-re
       (regexp-opt '("attachment"
                     "attached") )
       "If this regex is matched then the message should have an attachment.")

     (defcustom mbork/message-attachment-reminder
       "Are you sure you want to send this message without any attachment? "
       "The question asked when trying to send a message with a missing attachment.")

     (defun mbork/message-warn-if-no-attachments ()
       "Ask if the user wants to send even though the message has no attachment."
       (when (and (save-excursion
                    (save-restriction
                      (widen)
                      (goto-char (point-min))
                      (re-search-forward mbork/message-attachment-intent-re nil t)))
                  (not (mbork/message-attachment-present-p)))
         (unless (y-or-n-p mbork/message-attachment-reminder)
           (keyboard-quit))))

     (add-hook 'message-send-hook #'mbork/message-warn-if-no-attachments)

     ;; End of GPLv2-licensed code copyright (c) Marcin Borkowsi.
   #+END_SRC

** Add Attachments at Ends of Buffers
   =mml-attach-file=, the function used in =mu4e:compose= mode to add attachments to mail, adds the specified file where =point= happens to be.
   [[http://emacs.1067599.n8.nabble.com/Why-does-mml-attach-file-put-the-attachment-at-the-very-end-of-the-message-td373798.html][This thread]], authored by Marcin Borkowski, explores the problems that attachments anywhere but the end of a message buffer can cause.
   In light of that, it is desirable to only /ever/ insert attachments at the end of the buffer.
   This can be accomplished by advising =mml-attach-file= to automatically move and restore =point=.
   Borkowsi provided code to do so in [[http://mbork.pl/2015-11-28_Fixing_mml-attach-file_using_advice][a blog post]].

   The license of the post's code does not appear to be posted anywhere on Borkowski's blog.
   I have reached out to Borkowski asking about how he would like the code to be licensed.

   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; The following code is derived from code written by Marcin Borkowski
     ;; (alias mbork):
     ;; http://mbork.pl/2015-11-28_Fixing_mml-attach-file_using_advice.  I
     ;; am assuming that the code is GPLv2-licensed, in keeping with
     ;; https://github.com/mbork/message/blob/HEAD/mbork-message.el.

     (defun mml-attach-file--go-to-eob (orig-fun &rest args)
       "Go to the end of the buffer before attaching files."
       (save-excursion
         (save-restriction
           (widen)
           (goto-char (point-max))
           (apply orig-fun args))))

     (advice-add 'mml-attach-file :around #'mml-attach-file--go-to-eob)

     ;; End of GPLv2-licensed code copyright (c) Marcin Borkowsi.
   #+END_SRC

** Ending Boilerplate
  #+BEGIN_SRC emacs-lisp :tangle yes
    (provide 'init-mu4e)
    ;;; init-mu4e.el ends here
  #+END_SRC
