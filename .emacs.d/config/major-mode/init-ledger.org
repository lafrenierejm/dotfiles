#+TITLE: Ledger Configuration
#+AUTHOR: Joseph LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz

* License
  All code sections in this file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains my configuration for [[https://github.com/ledger/ledger-mode][Ledger mode]], a major mode for the Ledger accounting system.
  This file is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].

* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;; init-ledger.el --- Configuration for Ledger mode

     ;;; Commentary:
     ;; This file is tangled from init-ledger.org.
     ;; Changes made here will be overwritten by changes to that Org-mode file.

     ;;; Code:
   #+END_SRC

** Load =[[https://github.com/ledger/ledger-mode][ledger-mode]]= with =use-package=
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package ledger-mode
       :mode          ; establish deferred binding within `auto-mode-alist'
       (("\\.ledger\\'" . ledger-mode)))
   #+END_SRC

** Load =[[https://github.com/atheriel/evil-ledger][evil-ledger]]= with =use-package=
   From =evil-ledger='s README:
   #+BEGIN_QUOTE
   The evil-ledger package provides a minor mode for Emacs that adds Evil motions and operators to ledger-mode buffers.
   It allows you to treat transactions as text objects while in evil-mode --- selecting, deleting, and changing around and inside them as a unit.
   #+END_QUOTE
   The above quote is copyright (c) https://github.com/atheriel and licensed under GPLv3.

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package evil-ledger
       :after        ; load the parent package after the following packages
       (evil ledger-mode)

       :hook
       ((ledger-mode) . evil-ledger-mode))
   #+END_SRC

** Ending Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-ledger)
     ;;; init-ledger.el ends here
   #+END_SRC
