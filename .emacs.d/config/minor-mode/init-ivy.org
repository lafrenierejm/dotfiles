#+TITLE: Minibuffer Completion with Ivy and Counsel
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+LaTeX_header: \usepackage[margin=1in]{geometry}

* License
  All code sections in this =.org= file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file configures minibuffer completion with two packages:
  - Ivy, a generic completion mechanism for Emacs.
  - Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
  - Swiper, an incremental search built around Ivy.
  All three packages are published in author abo-abo's [[https://github.com/abo-abo/swiper/tree/master][swiper GitHub repository]].

  The file itself is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org mode Babel]].

* Code
** Introductory Boilerplate

  #+BEGIN_SRC emacs-lisp :tangle yes
    ;;; init-ivy.el --- Minibuffer completion with Ivy, Counsel, and Swiper

    ;;; Commentary:
    ;; This file is tangled from init-ivy.org.
    ;; Changes made here will be overwritten by changes to that Org file.

    ;;; Code:
  #+END_SRC
   
** Load =flx=
   =[[https://github.com/lewang/flx][flx]]= provides fuzzy searching algorithms.
   Ivy's fuzzy finding will use =flx='s scoring mechanism if =flx= is loaded.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package flx
       :demand                               ; do not defer loading

       :init            ; code to execute before loading the parent package
       ;; Run Emacs's garbage collector after no less than 20 MB allocated.
       ;; Doing so greatly improve's flx's performance when working with
       ;; large sets.
       (when (> 20000000 gc-cons-threshold)
         (setq gc-cons-threshold 20000000))
       )
   #+END_SRC

** Load Ivy
   From the project's README:
   #+BEGIN_QUOTE
   Ivy is a generic completion mechanism for Emacs.
   While it operates similarly to other completion schemes such as =icomplete-mode=, Ivy aims to be more efficient, smaller, simpler, and smoother to use yet highly customizable.
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ivy
       :demand                               ; do not defer loading

       :defines   ; variables provided by the parent package and used below
       (ivy-display-style
        ivy-extra-directories
        ivy-format-function
        ivy-re-builders-alist
        ivy-use-virtual-buffers)
       
       :commands   ; commands provided by the parent package and used below
       (ivy-mode
        ivy-format-function-line)

       :bind
       (("C-x C-b" . ivy-switch-buffer)
        :map ivy-minibuffer-map
        ("<C-return>" . ivy-immediate-done))

       :diminish                   ; invoke `diminish'
       ;; Do not display "ivy" in the modeline.
       (ivy-mode . "")

       :init

       :config   ; code to execute after the parent package has been loaded
       ;; Enable ivy-mode globally.
       (ivy-mode 1)
       ;; Do not switch to buffers matched by the any of the following regexps.
       (add-to-list 'ivy-ignore-buffers '"^\*tramp\/.*\*$")
       ;; Highlight the matching parts of the regexp in the minibuffer.
       (setq ivy-display-style 'fancy)
       ;; Extend line highlighting to the right.
       (setq ivy-format-function 'ivy-format-function-line)
       ;; Show recently killed buffers when calling `ivy-switch-buffer'.
       (setq ivy-use-virtual-buffers t)
       ;; Perform fuzzy matching by default.
       (setq ivy-re-builders-alist '((read-file-name-internal . ivy--regex-fuzzy)
                                     (t . ivy--regex-plus)))
       ;; Do not show "./" and "../" in the filename completion list.
       (setq ivy-extra-directories nil))
   #+END_SRC

** Load Counsel
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package counsel
       :demand                               ; do not defer loading

       :after
       (ivy)
       
       :bind                                 ; alist of keybindings
       (("M-x" . counsel-M-x)
        ("C-x f" . counsel-find-file)
        ("C-x C-f" . counsel-find-file)))
   #+END_SRC

** Load Swiper
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package swiper
       :demand                               ; do not defer loading
       
       :commands   ; commands provided by the parent package and used below
       (swiper)

       :bind                                 ; alist of keybindings
       (("C-s" . swiper)))
   #+END_SRC

** Ending Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-ivy)
     ;;; init-ivy.el ends here
   #+END_SRC
