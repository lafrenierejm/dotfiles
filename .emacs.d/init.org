#+TITLE: Initialization
#+AUTHOR: Joseph LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+LaTeX_header: \usepackage[margin=1in]{geometry}

* License
  All code sections in this =.org= file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file is written in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.
  
* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;; init.el --- Setup package management and load remaining config

     ;;; Commentary:
     ;; This file is tangled from init.org.
     ;; Changes made here will be overwritten by changes to that Org-mode file.

     ;;; Code:
   #+END_SRC

** Optional Debug
   Use the following if there is a bug that cannot be found with =emacs --debug-init=:

   #+BEGIN_SRC emacs-lisp :tangle no
     (toggle-debug-on-error)
   #+END_SRC

** Package Management with =straight.el=
   =[[https://github.com/raxod502/straight.el][straight.el]]= is a "next-generation, purely functional package manager".

   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; Disable package.el.
     (setq package-enable-at-startup nil)

     ;; Bootstrap straight.el, a purely functional package manager.
     (setq straight-recipe-overrides
           '((nil . ((straight :type git :host github
                                  :repo "raxod502/straight.el"
                                  :branch "develop"
                                  :files ("straight.el"))))))

     (let ((bootstrap-file (concat user-emacs-directory "straight/bootstrap.el"))
           (bootstrap-version 2))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+END_SRC
   
*** Integration with =use-package=
    =straight.el= provides native support for jwiegley's =[[https://github.com/jwiegley/use-package][use-package]]=.
    To begin, =use-package= is installed with =straight.el=.

    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; Enable straight.el's integration with use-package.
      (straight-use-package 'use-package)
      (straight-use-package 'diminish)

      ;; Automatically install missing packages.
      (setq straight-use-package-by-default t)

      ;; Default to loading lazily, to be manually overwridden with `:demand'.
      ;; This behavior makes it more explicit when a package will be loaded.
      (setq use-package-always-defer t)
    #+END_SRC

    Now =use-package= will use =straight.el= to automatically install missing packages.

*** Load validate
    [[https://github.com/Malabarba/validate.el][validate]] provides functions to perform schema validation.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package validate
        :demand                               ; do not defer loading

        :straight                             ; recipe for straight.el
        (validate :type git :host github :repo "Malabarba/validate.el")

        :commands   ; commands provided by the parent package and used below
        (validate-setq))
    #+END_SRC

** Extract Emacs Lisp from Org-mode Files
   An Emacs configuration written in Org-mode is not in a form that is able to be directly evaluated by Emacs.
   The Emacs Lisp components must be extracted and collated apart from the surrounding markup (this process is referred to as tangling).
   The function =org-babel-tangle= exists to do this.
   
*** Loading Org-mode with =use-package=
    However, =org-babel-tangle= is provided Org-mode.
    So in order to tangle the rest of the configuration, Org-mode must be loaded.
    
    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package org
        :demand                               ; do not defer loading

        :straight nil                    ; do not download using straight.el

        :defines   ; variables provided by the parent package and used below
        (org-export-default-language
         org-highlight-latex-and-related
         org-mode-hook)

        :mode          ; establish deferred binding within `auto-mode-alist'
        (("\\.org\\'" . org-mode))

        :init            ; code to execute before loading the parent package
        <<org-init>>

        :config   ; code to execute after the parent package has been loaded
        <<org-config>>)
    #+END_SRC

**** Pre-Load Execution
     :PROPERTIES:
     :noweb-ref: org-init
     :END:

     #+BEGIN_SRC emacs-lisp
       ;; Visually distinguish inline LaTeX.
       (setq org-highlight-latex-and-related '(latex))
       ;; Specify English as the default langauge for exported files.
       (setq org-export-default-language "en")
     #+END_SRC

***** Workflow States
      The corresponding page in the Org guide is "[[http://orgmode.org/guide/Multi_002dstate-workflows.html][multi-state workflows]]".

      Each item has one of three different types of state.
      Any given item may
      1. need further attention,
      2. be complete (as far as I am concerned), or
      3. be canceled.

      Org allows for multiple keywords within each state.
      States are delimited in =org-todo-keywords= with a pipe character.

      #+BEGIN_SRC emacs-lisp
       	;; Set the workflow states.
       	(setq org-todo-keywords
              '((sequence
                 "TODO" "FEEDBACK" "VERIFY" "|"
                 "DELEGATED" "DONE" "|"
                 "CANCELED")))
      #+END_SRC

**** Post-Load Execution
     :PROPERTIES:
     :noweb-ref: org-config
     :END:

     After =org= has been loaded, I want to add hooks to enable various following minor modes.
     - =flyspell-mode= to perform spellcheck.
     - =visual-line-mode= to prevent long lines from wrapping.
       I find that prose is most well-suited for version control when it is formatted as one dependent clause per line.
       That tends to result in long lines of text, which is inconvenient if I have to scroll my buffer to view the entire line.

     #+BEGIN_SRC emacs-lisp
       ;; Add minor modes to `org-mode-hook'
       (dolist (minor-mode (list
                            'flyspell-mode
                            'visual-line-mode))
         (add-hook 'org-mode-hook minor-mode))
     #+END_SRC


*** Extracting Remaining Configuration
    Babel provides the function =org-babel-load-file= to load Emacs Lisp source code blocks from Org-mode a given file.
    =org-babel-load-file= first tangles the file's source blocks using =org-babel-tangle=, then calls =load-file= on the resulting file.
    For the purposes of this configuration, Org-mode files shall be loaded when the Org file has been modified more recently than its corresponding Emacs Lisp file.

**** Build the List of Files to Load
     1. The given directory (passed as an argument) is searched recursively for Org mode files (=.org= extension).
	Each Org file found is added to a list.
     2. For each Org file in the list, look for a corresponding Emacs Lisp file (=.el= extension).
	"Correspondence" is determined by the Org and Lisp filenames matching until the extension.
     3. If the Emacs Lisp file has been modified more recently than its corresponding Org file, remove the Org file from the list.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun init/filter (condp lst)
        "Remove items that do not meet CONDP from LST."
        (delq nil
              (mapcar (lambda (x) (and (funcall condp x ) x)) lst)))

      (defun init/replace-file-name-extension (filename extension)
        "Replace a FILENAME's extension with EXTENSION."
        (if (string= "." (substring extension  0 1)) ; If user included "." in extension
            (concat (file-name-sans-extension filename) extension)
          (concat (file-name-sans-extension filename) "." extension)))

      (defun init/org/find-files-to-tangle (directory tangle-extension)
        "Return the Org files in DIRECTORY older than corresponding files with TANGLE-EXTENSION."
        (let ((org-files (directory-files-recursively directory "\.org$")))
          (init/filter (lambda (org-file)
                         (let ((tangle-file
                                (init/replace-file-name-extension org-file tangle-extension)))
                           (or (not (file-exists-p tangle-file))
                               (file-newer-than-file-p org-file tangle-file))))
                       org-files)))
    #+END_SRC

*** Load =config/=
**** Tangle Code from =config/= Recursively
    The bulk of my configuration is in Org files in the =config/= subdirectory.
    Now the above functions are be employed to tangle the Emacs Lisp from the Org files.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (mapcar (lambda (org-file)
                (message "Tangling and compiling " org-file ".")
                ;; (byte-compile-file (car (org-babel-tangle-file org-file))))
                (org-babel-tangle-file org-file))
              (init/org/find-files-to-tangle
               (concat (file-name-as-directory user-emacs-directory) "config")
               ".el"))
    #+END_SRC

**** Load Compiled Emacs Lisp
    The previous tangling extracted all Emacs Lisp code from Org-mode files in =config/=.
    Now =config/= is searched for Emacs Lisp files which have the filename extension =el=.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun init/load-directory-recursively (directory)
        "Recurse through DIRECTORY and load all compiled Emacs Lisp files found."
        (dolist (elisp-file (directory-files-recursively directory "^[^.]+\.el$"))
          (load-file elisp-file)))

      (init/load-directory-recursively
       (concat (file-name-as-directory user-emacs-directory) "config"))
    #+END_SRC
