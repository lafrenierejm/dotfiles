#+TITLE: Static Analysis Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: HEADER-ARGS+ :noweb yes

#+BEGIN_SRC emacs-lisp :tangle yes
;;; init-static-analysis.el --- Configure generic static analyzers

;; Copyright (C) Joseph M LaFreniere (lafrenierejm)

;; Author: Joseph M LaFreniere <joseph@lafreniere.xyz>
;; Keywords: processes
;; Version 1.0
;; Package-Requires: ((general) (use-package))

;; <<license>>

;;; Commentary:
;; <<commentary>>

;;; Code:
<<code>>

(provide 'init-static-analysis)
;;; init-static-analysis.el ends here
#+END_SRC

* License
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref license
:END:

#+BEGIN_SRC text
This file is not part of GNU Emacs.

Init Static Analysis is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Init Static Analysis is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with GNU Emacs.
If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

* Commentary
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref commentary
:END:

#+BEGIN_SRC text
This file contains configuration for generic static analyzers including linters and spellcheckers.
It is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].
Changes made here will be overwritten by changes to that Org file.
#+END_SRC

* Code
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref code
:END:

** Dependencies
#+BEGIN_SRC emacs-lisp
(require 'general)
(require 'use-package)
#+END_SRC

** Flyspell
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ghook
  ('prog-mode-hook #'flyspell-prog-mode))
#+END_SRC

** Ispell
#+BEGIN_SRC emacs-lisp
(use-package ispell
  ;; This package is included in Emacs.
  :straight nil

  ;; Only load this package if the following code evaluates to non-nil.
  :if
  <<ispell/if>>

  ;; Do not load this package lazily.
  :demand

  ;; Evaluate the following code after loading this package.
  :config
  <<ispell/config>>)
#+END_SRC

*** Conditional Loading
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref ispell/if
:DESCRIPTION: Define condition for loading Ispell.
:END:

Ispell provides interfaces for third-party spellchecking binaries.
If no such binaries exist, Ispell does not need to be downloaded.

#+BEGIN_SRC emacs-lisp
(executable-find "aspell")
#+END_SRC

*** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref ispell/config
:DESCRIPTION: Code to be evaluated after Ispell has been loaded.
:END:

Set the executable to use for spellchecking.
If =aspell= is not available, disable Ispell.

#+BEGIN_SRC emacs-lisp
(cond
 ((executable-find "aspell")
  (setq ispell-program-name "aspell"))
 (t
  (setq ispell-program-name nil)))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  ;; Load this package eagerly.
  :demand

  ;; Evaluate the following code after loading this package.
  :config
  ;; Enable `flycheck-mode' globally.
  (global-flycheck-mode))
#+END_SRC
