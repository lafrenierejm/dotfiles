#+TITLE: Evil Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: HEADER-ARGS+ :noweb yes

#+BEGIN_SRC emacs-lisp :tangle yes
;;; init-evil.el --- Configure Evil features

;; Copyright (C) Joseph M LaFreniere (lafrenierejm)

;; Author: Joseph LaFreniere <joseph@lafreniere.xyz>
;; Keywords: frames
;; Version 1.0
;; Package-Requires: ((general) (use-package))

;; <<license>>

;;; Commentary:
;; <<commentary>>

;;; Code:
<<code>>

(provide 'init-evil)
;;; init-evil.el ends here
#+END_SRC

* License
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref license
:END:

#+BEGIN_SRC text
This file is not part of GNU Emacs.

Init Evil is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Init Evil is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with GNU Emacs.
If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

* Commentary
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref commentary
:END:

#+BEGIN_SRC text
This file is tangled from init-evil.org.
Changes made here will be overwritten by changes to that Org file.
#+END_SRC

* Code
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref code
:END:

** Dependencies
#+BEGIN_SRC emacs-lisp
(require 'general)
(require 'use-package)
#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  ;; Evaluate the following code before anything else.
  :preface
  <<evil/preface>>

  ;; Load this package eagerly.
  :demand

  ;; Set the following keybindings.
  :general
  <<evil/general>>

  ;; Evaluate the following code after loading this package.
  :config
  <<evil/config>>)
#+END_SRC

*** Preface Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil/preface
:END:

Allow use of Evil Collection.

#+BEGIN_SRC emacs-lisp
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
#+END_SRC

*** Set Keybindings (~:general~)
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil/general
:END:

Do not allow =C-z= to enter Emacs mode.

#+BEGIN_SRC emacs-lisp
(:states (list 'normal 'insert 'visual 'replace 'operator 'motion)
         "C-z" nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(:states 'motion
 "H" #'init-evil/beginning-of-maybe-line
 "L" #'init-evil/end-of-maybe-line
 (kbd "SPC") 'evil-toggle-fold)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(:states 'normal
 "Y" #'init-evil/evil-yank-to-end-of-line)
#+END_SRC

*** Post-Load Evaluation (~:config~)
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil/config
:END:

Enable Evil by default in all modes.

#+BEGIN_SRC emacs-lisp
(evil-mode)
#+END_SRC

**** Define =evil-yank-to-end-of-line=
#+BEGIN_SRC emacs-lisp
(defun init-evil/evil-yank-to-end-of-line ()
  "Yank the characters from point to the end of the current line."
  (interactive)
  (evil-yank (point) (point-at-eol)))
#+END_SRC

**** Semantic Movement Within Lines
***** Define ~back-to-comment~
The following code is based on [[http://stackoverflow.com/a/14245964%0A][a StackOverflow answer]] by user [[https://stackoverflow.com/users/387076/gilles][Gilles]].
All code posted to StackOverflow.com is licensed under CC BY-SA 3.0, so the following derived code is also CC BY-SA 3.0-licensed.

#+BEGIN_SRC emacs-lisp
(defun init-evil/back-to-comment ()
  "Move point to the beginning of the comment in the current line.

If the current line does not contain a comment, then point will stay
in place and the function will return nil.  Otherwise the function
will return t."
  (interactive "^")
  (save-match-data
    ;; Record the position of the beginning of the line.
    (let ((old-point (point))
          (bol (progn
                 (beginning-of-line)
                 (point))))
      ;; Go to the end of the line.
      (end-of-line)
      ;; Look backward from there for a comment.
      (if (and comment-start-skip
               (comment-search-backward bol 'noerror))
          (progn
            (message "Comment found")
            ;; Go to the start of the comment's delimeter.
            (search-backward-regexp comment-start-skip bol 'noerror)
            ;; Go the start of any immediately prior whitespace.
            (skip-syntax-backward " \t" bol)
            ;; Return t.
            t)
        ;; Return point to its previous location.
        (goto-char old-point)
        ;; Return nil.
        nil))))
#+END_SRC

***** Define ~init-evil/back-totext~
#+BEGIN_SRC emacs-lisp
(defun init-evil/back-totext ()
  "Move point to the last non-whitespace character on this line."
  (interactive)
  ;; Move point to the last character on this line.
  (move-end-of-line nil)
  ;; Move backward for non-whitesapce character.
  (re-search-backward "^\\|[^[:space:]]")
  ;; Move forward one character.
  (forward-char))
#+END_SRC

***** Define ~beginning-of-maybe-line~
~beginning-of-maybe-line~ moves ~point~ toward the beginning of the current line incrementally by semantic region.
The following semantic elements are considered:
1. Comment
2. Source code
3. Indentation (leading whitespace)

The following code is based on [[https://stackoverflow.com/a/145359/8468492][a StackOverflow answer]] by user [[https://stackoverflow.com/users/8355/cjm][cjm]].
All code posted to StackOverflow.com is licensed under CC BY-SA 3.0, so the following derived code is also CC BY-SA 3.0-licensed.

#+BEGIN_SRC emacs-lisp
(defun init-evil/beginning-of-maybe-line ()
  "Move point to first non-whitespace character or beginning of the line.

Move point to the first non-whitespace character on the line.  If the
point was already at that position, move point to the beginning of the
line."
  (interactive)
  (let ((old-point (point)))            ; current position
    ;; Go to the beginning of a comment.  If there is not comment or
    ;; if point is already at or to the left of the comment...
    (when (or (not (init-evil/back-to-comment))
              (<= old-point (point)))
      ;; Go to the first non-whitespace column.
      (back-to-indentation)
      ;; If already at or to the left of the first non-whitespace character...
      (when (<= old-point (point))
        ;; Go to the beginning of the line.
        (beginning-of-line)))))
#+END_SRC

***** Define ~end-of-maybe-line~
~end-of-maybe-line~ incrementally moves ~point~ to the right within a line by semantic region.
The following semantic elements are considered in ~end-of-maybe-line~'s movement:
1. Source code
2. Comments
3. Trailing whitespace


The following is licensed CC BY-SA 3.0-licensed by StackOverflow user [[https://stackoverflow.com/users/387076/gilles][Gilles]].
It is based on [[http://stackoverflow.com/a/14245964][Gilles's StackOverflow answer]].

#+BEGIN_SRC emacs-lisp
(defun init-evil/end-of-maybe-line ()
  "Incrementally move point to the ends of syntactic blocks within the line.

The syntactic blocks are as follows, ordered from right to left:
1. Source code
2. Inline comment"
  (interactive "^")
  ;; Record point's current position.
  (let ((old-point (point)))
    ;; Go to the beginning of an inline comment (if any).
    (init-evil/back-to-comment)
    ;; If already at or after the start of the comment...
    (when (>= old-point (point))
      ;; ...then go to the beginning of trailing whitespace.
      (init-evil/back-totext))))
#+END_SRC

** Evil Collection
From the package's README:
#+BEGIN_QUOTE
This is a collection of Evil bindings for /the parts of Emacs/ that Evil does not cover properly by default, such as ~help-mode~, =M-x calendar=, Eshell and more
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :demand

  :after evil

  :custom
  <<evil-collection/custom>>

  :config
  <<evil-collection/config>>)
#+END_SRC

*** Apply Customizations
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-collection/custom
:END:

Set up autocompletion to be similar to Vim's YouCompleteMe.

#+BEGIN_SRC emacs-lisp
(evil-collection-company-use-tng t)
#+END_SRC

Enable =TAB=-based bindings in Outline mode.

#+BEGIN_SRC emacs-lisp
(evil-collection-outline-bind-tab t)
#+END_SRC

Synchronize insert and normal states with char and line modes, respectively, in Term mode.

#+BEGIN_SRC emacs-lisp
(evil-collection-term-sync-state-and-mode-p t)
#+END_SRC

Set up Vim-style keybindings in the minibuffer.

#+BEGIN_SRC emacs-lisp
(evil-collection-setup-minibuffer t)
#+END_SRC

Set up debugger keys.

#+BEGIN_SRC emacs-lisp
(evil-collection-setup-debugger-keys t)
#+END_SRC

*** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-collection/config
:END:

Enable Evil Collection globally.

#+BEGIN_SRC emacs-lisp
(evil-collection-init)
#+END_SRC

** Evil Matchit
[[https://github.com/redguardtoo/evil-matchit][Evil Matchit]] is a port of Tim Pope's [[http://www.vim.org/scripts/script.php?script_id%3D39][matchit.vim]] to Evil.
It enables jumping between matched tags, e.g. =<div>= and =</div>=.

#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
  ;; Load eagerly.
  :demand

  :config
  (global-evil-matchit-mode 1)
  (add-hook 'evil-matchit-mode-hook
            (lambda ()
              (evil-global-set-key 'motion (kbd "%") #'evilmi-jump-items))))
#+END_SRC

** Evil Surround
[[https://github.com/emacs-evil/evil-surround][Evil Surround]] is a port of [[https://github.com/tpope/vim-surround][vim-surround]] to Evil.
It adds a "surround" verb to Evil's modal editing.

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  ;; Load eagerly.
  :demand

  :config
  (global-evil-surround-mode 1))
#+END_SRC

** Evil Indent Plus
=[[https://github.com/TheBB/evil-indent-plus]]= adds indentation levels as a text object for Evil.

- =i= is same or higher indentation.
- =I= is same or higher indentation, including the first line above with less indentation.
- =J= is same or higher indentation, including the first line above and below with less indentation.

#+BEGIN_SRC emacs-lisp
(use-package evil-indent-plus
  ;; Load eagerly.
  :demand

  :config
  (evil-indent-plus-default-bindings))
#+END_SRC
