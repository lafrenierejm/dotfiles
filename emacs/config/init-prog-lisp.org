#+TITLE: Configuration for S Expression-Based Language
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: HEADER-ARGS+ :noweb yes

#+BEGIN_SRC emacs-lisp :tangle yes
;;; init-prog-lisp.el --- Configuration for sexp-based languages

;; Copyright (C) Joseph M LaFreniere (lafrenierejm)

;; Author: Joseph M LaFreniere <joseph@lafreniere.xyz>
;; Keywords: languages
;; Version 1.0
;; Package-Requires: ((derived) (general) (use-package))

;; <<license>>

;;; Commentary:
;; <<commentary>>

;;; Code:
<<code>>

(provide 'init-prog-lisp)
;;; init-prog-lisp.el ends here
#+END_SRC

* License
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref license
:END:

#+BEGIN_SRC text
This file is not part of GNU Emacs.

Init Prog Lisp is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Init Prog Lisp is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with GNU Emacs.
If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

* Commentary
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref commentary
:END:

#+BEGIN_SRC text
This file is tangled from init-prog-lisp.org.
Changes made here will be overwritten by changes to that Org file.
#+END_SRC

* Code
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref code
:END:

** Dependencies
#+BEGIN_SRC emacs-lisp
(require 'derived)
(require 'general)
(require 'use-package)
#+END_SRC

** Lisp Modes

It is desirable to have slightly different character matching behavior when editing Lisps.
The following is a list of the Lisp modes I edit in.

#+BEGIN_SRC emacs-lisp
(defconst init-prog-lisp/major-modes
  '(cider-repl-mode
    clojure-mode
    emacs-lisp-mode
    ielm-mode
    lisp-mode
    minibuffer-inactive-mode
    scheme-mode)
  "A list of Lisp major modes.")
#+END_SRC

And the above modes' hooks:

#+BEGIN_SRC emacs-lisp
(defconst init-prog-lisp/major-mode-hooks
  (mapcar #'derived-mode-hook-name init-prog-lisp/major-modes)
  "A list of Lisp major mode hooks.")
#+END_SRC

** Indent Tabs Mode
For sexp-based languages it is desirable to disallow tabs for line indentation.

#+BEGIN_SRC emacs-lisp
(defun init-prog-lisp/use-spaces ()
  "Only use spaces (as opposed to tabs) for indentation."
  (setq indent-tabs-mode nil))
#+END_SRC

Add above function to all Lisp major modes' hooks.

#+BEGIN_SRC emacs-lisp
(general-add-hook init-prog-lisp/major-mode-hooks #'init-prog-lisp/use-spaces)
#+END_SRC

** Lisp Mode
#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :config
  <<lisp-mode/config>>)
#+END_SRC

*** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref lisp-mode/config
:END:
**** Fuco1's Indentation
:PROPERTIES:
:COPYRIGHT_AUTHOR: Matus Goljer (Fuco1)
:COPYRIGHT_EMAIL: matus.goljer@gmail.com
:COPYRIGHT_URL: https://github.com/Fuco1/.emacs.d/blob/af82072196564fa57726bdbabf97f1d35c43b7f7/site-lisp/redef.el#L12-L94
:COPYRIGHT_YEAR: 2015
:END:

Redefine Lisp Mode's indentation function.
#+BEGIN_SRC emacs-lisp
(defun lisp-indent-function (indent-point state)
  "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.

INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.

If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:

-`defun', meaning indent `defun'-style
  \(this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);

- an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;

- a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.

This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation."
  (let ((normal-indent (current-column))
        (orig-point (point)))
    (goto-char (1+ (elt state 1)))
    (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
    (cond
     ;; car of form doesn't seem to be a symbol, or is a keyword
     ((and (elt state 2)
           (or (not (looking-at "\\sw\\|\\s_"))
               (looking-at ":")))
      (if (not (> (save-excursion (forward-line 1) (point))
                  calculate-lisp-indent-last-sexp))
          (progn (goto-char calculate-lisp-indent-last-sexp)
                 (beginning-of-line)
                 (parse-partial-sexp (point)
                                     calculate-lisp-indent-last-sexp 0 t)))
      ;; Indent under the list or under the first sexp on the same
      ;; line as calculate-lisp-indent-last-sexp.  Note that first
      ;; thing on that line has to be complete sexp since we are
      ;; inside the innermost containing sexp.
      (backward-prefix-chars)
      (current-column))
     ((and (save-excursion
             (goto-char indent-point)
             (skip-syntax-forward " ")
             (not (looking-at ":")))
           (save-excursion
             (goto-char orig-point)
             (looking-at ":")))
      (save-excursion
        (goto-char (+ 2 (elt state 1)))
        (current-column)))
     (t
      (let ((function (buffer-substring (point)
                                        (progn (forward-sexp 1) (point))))
            method)
        (setq method (or (function-get (intern-soft function)
                                       'lisp-indent-function)
                         (get (intern-soft function) 'lisp-indent-hook)))
        (cond ((or (eq method 'defun)
                   (and (null method)
                        (> (length function) 3)
                        (string-match "\\`def" function)))
               (lisp-indent-defform state indent-point))
              ((integerp method)
               (lisp-indent-specform method state
                                     indent-point normal-indent))
              (method
               (funcall method indent-point state))))))))
#+END_SRC

** Aggressive Indent
Aggressive Indent provides a minor mode to re-indent code after every change.

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ghook
  (init-prog-lisp/major-mode-hooks #'aggressive-indent-mode))
#+END_SRC

** Smartparens
*** Smartparens
Smartparens Config's primary configuration is in [[file:init-char-matching.org][Init Char Matching]].

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  ;; Evaluate the following code after loading this package.
  :config
  <<smartparens/config>>)
#+END_SRC

**** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref smartparens/config
:END:

Lisps use the single quote (='=) for quoting, where it is not paired with a closing character.

#+BEGIN_SRC emacs-lisp
(sp-local-pair init-prog-lisp/major-modes "'" nil :actions nil)
#+END_SRC

*** Evil Cleverparens
Author Llli Pieponnen (luxbock)'s describes Evil Cleverparens as providing an "Evil normal-state minor-mode for editing lisp-like languages".

#+BEGIN_SRC emacs-lisp
(use-package evil-cleverparens
  ;; Delay loading this package until after the following packages.
  :after
  (:all evil smartparens)

  ;; Inform the byte compiler of the following functions.
  :functions init-prog-lisp/evil-move-beyond-eol

  ;; Add the following autoloading hooks.
  :ghook
  <<evil-cleverparens/ghook>>

  ;; Add the following non-autoloading hooks.
  :gfhook
  <<evil-cleverparens/gfhook>>

  :config
  <<evil-cleverparens/config>>)
#+END_SRC

**** Autoloading Hooks
:PROPERTIES:
:DESCRIPTION: Add auto-loading hooks related to Evil Cleverparens.
:HEADER-ARGS+: :noweb-ref evil-cleverparens/ghook
:END:

Enable ~evil-cleverparens-mode~ for Lisps.

#+BEGIN_SRC emacs-lisp
(init-prog-lisp/major-mode-hooks #'evil-cleverparens-mode)
#+END_SRC

**** Non-Autoloading Hooks
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-cleverparens/gfhook
:END:

Let the cursor move past the end of lines in Lisp source code.

#+BEGIN_SRC emacs-lisp
(init-prog-lisp/major-mode-hooks #'init-prog-lisp/evil-move-beyond-eol)
#+END_SRC

**** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-cleverparens/config
:END:

#+BEGIN_SRC emacs-lisp
(defun init-prog-lisp/evil-move-beyond-eol ()
  "Allow the cursor to move beyond the end of the line."
  (setq evil-move-beyond-eol t))
#+END_SRC

** Lisp-1
Lisp-1 languages have a single namespace for all names.

*** Geiser Guile
#+BEGIN_SRC emacs-lisp
(use-package geiser-guile
  :config
  (when-let ((path (expand-file-name
                    "org.gnu.savannah.git/guix/"
                    (or (getenv "XDG_SOURCE_DIR") "~/source")))
             ((file-directory-p path)))
    (add-to-list 'geiser-guile-load-path path)))
#+END_SRC

*** Guix
From the package's commentary:
#+BEGIN_QUOTE
Emacs-Guix (aka "guix.el") provides featureful visual interface for the GNU Guix package manager.
It allows you:
- to search for packages and to look at their code (package recipes);
- to manage your Guix profile(s) by installing/removing packages;
- to look at, compare and remove profile generations;
- to look at system services and generations (if you use [Guix System]);
- to do many other things.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package guix
  ;; Load this package if the following code evaluates to non-nil.
  :if
  <<guix/if>>

  ;; Add the following auto-loading hooks.
  :ghook
  <<guix/ghook>>

  ;; Evaluate the following code after loading this package.
  :custom
  (guix-load-path
   (when-let ((path (expand-file-name
                     "org.gnu.savannah.git/guix/"
                     (or (getenv "XDG_SOURCE_DIR") "~/source")))
              ((file-directory-p path)))
     path)
   "Directory or directories to prepend to Guile's `%load-path' and `load-compiled-path'."))
#+END_SRC

**** Conditions for Loading
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref guix/if
:END:

The package relies on =guix= being available on =$PATH=.

#+BEGIN_SRC emacs-lisp
(executable-find "guix")
#+END_SRC

**** Auto-Loading Hooks
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref guix/ghook
:END:

Replace hash symbols with ellipses.

#+BEGIN_SRC emacs-lisp
('(dired-mode-hook shell-mode-hook) #'guix-prettify-mode)
#+END_SRC

** Lisp-2
Lisp-2 languages have a separate namespace for functions.

*** Superior Lisp Interaction Mode (SLIME)
#+BEGIN_SRC emacs-lisp
(use-package slime
  :init
  (defvar init-prog-lisp/slime-extra
    '(slime-indentation slime-fancy)
    "The contrib packages for SLIME to load")

  :config
  (setq slime-lisp-implementations
        '((sbcl ("sbcl" "--noinform"))))
  (slime-setup init-prog-lisp/slime-extra))
#+END_SRC

*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  ;; Add the following keybindings.
  :general
  (:keymaps 'emacs-lisp-mode-map
   "C-c C-c" #'eval-buffer))
#+END_SRC
