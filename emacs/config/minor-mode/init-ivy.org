#+TITLE: Minibuffer Completion with Ivy and Counsel
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+LaTeX_header: \usepackage[margin=1in]{geometry}

* License
  All code sections in this =.org= file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file configures minibuffer completion with two packages:
  - Ivy, a generic completion mechanism for Emacs.
  - Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
  - Swiper, an incremental search built around Ivy.


  All three packages are published in author abo-abo's [[https://github.com/abo-abo/swiper/tree/master][swiper GitHub repository]].

  The file itself is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org mode Babel]].

* Code
** Introductory Boilerplate
  #+BEGIN_SRC emacs-lisp :tangle yes :padline no
    ;;; init-ivy.el --- Minibuffer completion with Ivy, Counsel, and Swiper

    ;;; Commentary:
    ;; This file is tangled from init-ivy.org.
    ;; Changes made here will be overwritten by changes to that Org file.

    ;;; Code:
  #+END_SRC
   
** Dependencies
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     (require 'use-package)
   #+END_SRC

** Load [[https://github.com/lewang/flx][flx]]
   flx provides fuzzy searching algorithms.
   Ivy's fuzzy finding will use flx's scoring mechanism if flx is loaded.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package flx
       :demand                               ; do not defer loading

       :after
       (validate)

       :init            ; code to execute before loading the parent package
       ;; Run Emacs's garbage collector after no less than 20 MB allocated.
       ;; Doing so greatly improve's flx's performance when working with
       ;; large sets.
       (when (> 20000000 gc-cons-threshold)
         (validate-setq gc-cons-threshold 20000000)))
   #+END_SRC

** Load Ivy
   From the project's README:
   #+BEGIN_QUOTE
   Ivy is a generic completion mechanism for Emacs.
   While it operates similarly to other completion schemes such as =icomplete-mode=, Ivy aims to be more efficient, smaller, simpler, and smoother to use yet highly customizable.
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ivy
       :demand                               ; do not defer loading

       :after
       (flx validate)

       :commands   ; commands provided by the parent package and used below
       (ivy-mode
        ivy-format-function-line)

       :bind
       (("C-x C-b" . ivy-switch-buffer)
        :map ivy-minibuffer-map
        ("<C-return>" . ivy-immediate-done))

       :diminish                   ; invoke `diminish'
       ;; Do not display "ivy" in the modeline.
       (ivy-mode . "")

       :config   ; code to execute after the parent package has been loaded
       ;; Enable ivy-mode globally.
       (ivy-mode 1)
       ;; Do not switch to buffers matched by the any of the following regexps.
       (add-to-list 'ivy-ignore-buffers '"^\*tramp\/.*\*$")
       ;; Highlight the matching parts of the regexp in the minibuffer.
       (validate-setq ivy-display-style 'fancy)
       ;; Extend line highlighting to the right.
       (validate-setq ivy-format-function 'ivy-format-function-line)
       ;; Show recently killed buffers when calling `ivy-switch-buffer'.
       (validate-setq ivy-use-virtual-buffers t)
       ;; Perform fuzzy matching by default.
       (validate-setq ivy-re-builders-alist '((read-file-name-internal . ivy--regex-fuzzy)
                                              (t . ivy--regex-plus)))
       ;; Do not show "./" and "../" in the filename completion list.
       (setq ivy-extra-directories nil))
   #+END_SRC

** Load Counsel
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package counsel
       ;; Do not load the package lazily.
       :demand                               ; do not defer loading

       ;; Load the parent package after the following packages.
       :after (ivy)

       ;; Add keybindings according to the following alist.
       :bind
       (("M-x" . counsel-M-x)
        ("C-h k" . counsel-descbinds)
        ("C-x f" . counsel-find-file)
        ("C-x C-f" . counsel-find-file)
        ("C-x C-4 C-f" . find-file-other-window)
        ("C-x C-4 b" . switch-to-buffer-other-window)
        ("C-x C-4 C-b" . switch-to-buffer-other-window)))
   #+END_SRC

** Load Swiper
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package swiper
       ;; Load this package eagerly.
       :demand

       ;; Load this package after the following packages.
       :after (ivy)

       ;; Add the following keybindings.
       :bind
       (("C-s" . swiper)))
   #+END_SRC

** Load ~ivy-rich~
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package ivy-rich
       ;; Load this package after the following packages.
       :after (ivy validate)

       ;; Load this package eagerly.
       :demand

       ;; Evaluate the following code after loading this package.
       :config
       <<ivy-rich/config>>)
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :DESCRIPTION: Code to evaluate after loading ~ivy-rich~.
    :HEADER-ARGS: :noweb-ref ivy-rich/config
    :END:

    Enable ~ivy-rich-mode~ globally.

    #+BEGIN_SRC emacs-lisp
      (ivy-rich-mode 1)
    #+END_SRC

    Align the virtual buffers.

    #+BEGIN_SRC emacs-lisp
      (validate-setq ivy-virtual-abbreviate 'full
		     ivy-rich-switch-buffer-align-virtual-buffer t)
    #+END_SRC

    Abbreviate paths using ~abbreviate-file-name~.

    #+BEGIN_SRC emacs-lisp
      (validate-setq ivy-rich-path-style 'abbrev)
    #+END_SRC

** Ending Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-ivy)
     ;;; init-ivy.el ends here
   #+END_SRC
