#+TITLE: Evil Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz

* License
  All code sections in this file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains my configuration for Evil, the "extensible vi layer" for Emacs.
  This file is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org mode Babel]].

* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     ;;; init-evil.el --- Configuration for evil

     ;;; Commentary:
     ;; This file is tangled from init-evil.org.
     ;; Changes made here will be overwritten by changes to that Org file.

     ;;; Code:
   #+END_SRC

** Dependencies
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     (require 'use-package)
   #+END_SRC

** Load ~evil~
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package evil
       ;; `evil' is installed from GNU ELPA.
       :pin gnu

       :defines   ; variables provided by the parent package and used below
       (evil-default-cursor)

       :init            ; code to execute before loading the parent package
       (setq evil-default-cursor t) ;; Do not modify the cursor color.

       :config   ; code to execute after the parent package has been loaded
       <<evil/config>>)
   #+END_SRC

*** Post-Load Execution
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref evil/config
    :END:

    Set the following keybindings globally across Evil.
    They may be overwritten by other modes' keybindings.

    #+BEGIN_SRC emacs-lisp
      (evil-global-set-key 'motion "H" 'init-evil/beginning-of-maybe-line)
      (evil-global-set-key 'motion "L" 'init-evil/end-of-maybe-line)
      (evil-global-set-key 'motion (kbd "SPC") 'evil-toggle-fold)
      (evil-global-set-key 'normal "Y" 'init-evil/evil-yank-to-end-of-line)
    #+END_SRC

    Enable Evil by default in all modes.

    #+BEGIN_SRC emacs-lisp
      (evil-mode)
    #+END_SRC

**** Define =evil-yank-to-end-of-line=
     #+BEGIN_SRC emacs-lisp
       (defun init-evil/evil-yank-to-end-of-line ()
         "Yank the characters from point to the end of the current line."
         (interactive)
         (evil-yank (point) (point-at-eol)))
     #+END_SRC

**** Semantic Movement Within Lines
***** Define ~back-to-comment~
      The following code is based on [[http://stackoverflow.com/a/14245964%0A][a StackOverflow answer]] by user [[https://stackoverflow.com/users/387076/gilles][Gilles]].
      All code posted to StackOverflow.com is licensed under CC BY-SA 3.0, so the following derived code is also CC BY-SA 3.0-licensed.

      #+BEGIN_SRC emacs-lisp
        (defun init-evil/back-to-comment ()
          "Move point to the beginning of the comment in the current line.
        If the current line does not contain a comment, then point will stay
        in place and the function will return nil.  Otherwise the function
        will return t."
          (interactive "^")
          (save-match-data
            ;; Record the position of the beginning of the line.
            (let ((old-point (point))
                  (bol (progn
                         (beginning-of-line)
                         (point))))
              ;; Go to the end of the line.
              (end-of-line)
              ;; Look backward from there for a comment.
              (if (and comment-start-skip
                       (comment-search-backward bol 'noerror))
                  (progn
                    (message "Comment found")
                    ;; Go to the start of the comment's delimeter.
                    (search-backward-regexp comment-start-skip bol 'noerror)
                    ;; Go the start of any immediately prior whitespace.
                    (skip-syntax-backward " \t" bol)
                    ;; Return t.
                    t)
                ;; Return point to its previous location.
                (goto-char old-point)
                ;; Return nil.
                nil))))
      #+END_SRC

***** Define ~init-evil/back-totext~
      #+BEGIN_SRC emacs-lisp
        (defun init-evil/back-totext ()
          "Move point to the last non-whitespace character on this line."
          (interactive)
          ;; Move point to the last character on this line.
          (move-end-of-line nil)
          ;; Move backward for non-whitesapce character.
          (re-search-backward "^\\|[^[:space:]]")
          ;; Move forward one character.
          (forward-char))
      #+END_SRC

***** Define ~beginning-of-maybe-line~
      ~beginning-of-maybe-line~ moves ~point~ toward the beginning of the current line incrementally by semantic region.
      The following semantic elements are considered:
      1. Comment
      2. Source code
      3. Indentation (leading whitespace)

      The following code is based on [[https://stackoverflow.com/a/145359/8468492][a StackOverflow answer]] by user [[https://stackoverflow.com/users/8355/cjm][cjm]].
      All code posted to StackOverflow.com is licensed under CC BY-SA 3.0, so the following derived code is also CC BY-SA 3.0-licensed.

      #+BEGIN_SRC emacs-lisp
        (defun init-evil/beginning-of-maybe-line ()
          "Move point to first non-whitespace character or beginning of the line.
        Move point to the first non-whitespace character on the line.  If the
        point was already at that position, move point to the beginning of the
        line."
          (interactive)
          (let ((old-point (point)))            ; current position
            ;; Go to the beginning of a comment.  If there is not comment or
            ;; if point is already at or to the left of the comment...
            (when (or (not (init-evil/back-to-comment))
                      (<= old-point (point)))
              ;; Go to the first non-whitespace column.
              (back-to-indentation)
              ;; If already at or to the left of the first non-whitespace character...
              (when (<= old-point (point))
                ;; Go to the beginning of the line.
                (beginning-of-line)))))
      #+END_SRC

***** Define ~end-of-maybe-line~
      ~end-of-maybe-line~ incrementally moves ~point~ to the right within a line by semantic region.
      The following semantic elements are considered in ~end-of-maybe-line~'s movement:
      1. Source code
      2. Comments
      3. Trailing whitespace


      The following is licensed CC BY-SA 3.0-licensed by StackOverflow user [[https://stackoverflow.com/users/387076/gilles][Gilles]].
      It is based on [[http://stackoverflow.com/a/14245964][Gilles's StackOverflow answer]].

      #+BEGIN_SRC emacs-lisp
        (defun init-evil/end-of-maybe-line ()
          "Incrementally move point to the ends of syntactic blocks within the line.
        The syntactic blocks are as follows, ordered from right to left:
        1. Source code
        2. Inline comment"
          (interactive "^")
          ;; Record point's current position.
          (let ((old-point (point)))
            ;; Go to the beginning of an inline comment (if any).
            (init-evil/back-to-comment)
            ;; If already at or after the start of the comment...
            (when (>= old-point (point))
              ;; ...then go to the beginning of trailing whitespace.
              (init-evil/back-totext))))
      #+END_SRC

** Load [[https://github.com/redguardtoo/evil-matchit][evil-matchit]]
   ~evil-matchit~ is a port of Tim Pope's [[http://www.vim.org/scripts/script.php?script_id%3D39][matchit.vim]] to Evil.
   It enables jumping between matched tags, e.g. ~<div>~ and ~</div>~.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package evil-matchit
       ;; Install `evil-matchit' from MELPA Stable.
       :pin melpa-stable

       :config
       (global-evil-matchit-mode 1)
       (add-hook 'evil-matchit-mode-hook
                 (lambda ()
                   (evil-global-set-key 'motion (kbd "%") #'evilmi-jump-items))))
   #+END_SRC

** Load ~evil-surround~
   ~[[https://github.com/emacs-evil/evil-surround][evil-surround]]~ is a port of [[https://github.com/tpope/vim-surround][vim-surround]] to Evil.
   It adds a "surround" verb to Evil's modal editing.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package evil-surround
       ;; Install `evil-surround' from MELPA Stable.
       :pin melpa-stable

       :config
       (global-evil-surround-mode 1))
   #+END_SRC

** Load ~evil-indent-plus~
   =[[https://github.com/TheBB/evil-indent-plus]]= adds indentation levels as a text object for Evil.

   - =i= is same or higher indentation.
   - =I= is same or higher indentation, including the first line above with less indentation.
   - =J= is same or higher indentation, including the first line above and below with less indentation.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package evil-indent-plus
       ;; Install `evil-indent-plus' from MELPA.
       :pin melpa

       :config
       (evil-indent-plus-default-bindings))
  #+END_SRC

** Ending Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-evil)
     ;;; init-evil.el ends here
   #+END_SRC
