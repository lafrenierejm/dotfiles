#+TITLE: ParEdit Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+LaTeX_header: \usepackage[margin=1in]{geometry}

* License
  All code sections in this =.org= file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.

* About This File
  This file contains my configuration for working with ParEdit.
  This file is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org mode Babel]].

* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     ;;; init-paredit.el --- Configuration for working with Paredit

     ;;; Commentary:
     ;; This file is tangled from init-paredit.org.
     ;; Changes made here will be overwritten by changes to that Org file.

     ;;; Code:
   #+END_SRC

** Dependencies
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     (require 'use-package)
   #+END_SRC

** Load ParEdit
   From the Emacs Wiki's [[https://www.emacswiki.org/emacs/ParEdit][article on ParEdit]]:
   #+BEGIN_QUOTE
   ParEdit (=paredit.el=) is a minor mode for performing structured editing of S-expression data.
   The typical example of this would be Lisp or Scheme source code.
   #+END_QUOTE

   I want ParEdit enabled in all Lisp major mode buffers.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package paredit
       :demand                               ; do not defer loading

       :hook     ; add hooks for the left side to run the quoted right side
       ((cider-repl-mode
         clojure-mode
	 emacs-lisp-mode
         eval-expression-minibuffer-setup
         ielm-mode
         lisp-mode
         lisp-interaction-mode
         racket-mode
         scheme-mode) . paredit-mode))
   #+END_SRC

** Load evil-paredit
   [[https://github.com/roman/evil-paredit][evil-paredit]] is a minor mode that replaces some of Evil's verbs, e.g. =d=, with "safe" versions provided by =paredit=.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package evil-paredit
       ;; Load this package eagerly.
       :demand

       ;; Load this package after the following packages.
       :after (evil paredit)

       :hook     ; add hooks for the left side to run the quoted right side
       ((paredit-mode) . evil-paredit-mode)

       :config
       (evil-define-key 'motion evil-paredit-mode-map (kbd "C-f") 'paredit-forward-slurp-sexp)
       (evil-define-key 'motion evil-paredit-mode-map (kbd "C-d") 'paredit-forward-barf-sexp))
   #+END_SRC

** Ending Boilerplate
  #+BEGIN_SRC emacs-lisp :tangle yes
    (provide 'init-paredit)
    ;;; init-paredit.el ends here
  #+END_SRC
