#+TITLE: ws-butler Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: header-args+ :comments link
#+PROPERTY: header-args+ :tangle no

* License							   :noexport:
  All code sections in this file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file specifies a configuration for Le Wang (lewang)'s [[https://github.com/lewang/ws-butler][ws-butler]] package.
  The (GPLv3 licensed) description of the package:
  #+BEGIN_QUOTE
  - Only lines touched get trimmed.
    If the white space at end of buffer is changed, then blank lines at the end of buffer are truncated respecting require-final-newline.
  - Trimming only happens when saving.
  #+END_QUOTE

  This file itself is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org mode Babel]].

* Code
** Introductory Boilerplate					   :noexport:
  #+BEGIN_SRC emacs-lisp :tangle yes :padline no
    ;;; init-ws-butler --- Configure ws-butler for unobtrusive whitespace trimming

    ;;; Commentary:
    ;; This file is tangled from init-ws-butler.org.
    ;; Changes made here will be overwritten by changes to that Org file.

    ;;; Code:
  #+END_SRC

** Dependencies							   :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     (require 'use-package)
   #+END_SRC

** Load ~ws-butler~
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package ws-butler
       ;; Load this package eagerly.
       :demand

       ;; Hide this package's lighter.
       :diminish

       ;; Evaluate the following code after loading this package.
       :config
       <<ws-butler/config>>)
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS+: :noweb-ref ws-butler/config
    :DESCRIPTION: Code to be evaluated after loading ~ws-butler~.
    :END:

    Enable ws-butler globally.

    #+BEGIN_SRC emacs-lisp
      (ws-butler-global-mode)
    #+END_SRC

** Ending Boilerplate						   :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-ws-butler)
     ;;; init-ws-butler ends here
   #+END_SRC
