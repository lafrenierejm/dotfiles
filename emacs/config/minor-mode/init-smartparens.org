#+TITLE: Smartparens Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: header-args+ :comments link
#+PROPERTY: header-args+ :tangle no

* License                                                          :noexport:
  All code sections in this file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file loads and configures Emacs's built-in smartparens package.
  This file is written in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org mode Babel]].

* Code
** Introductory Boilerplate                                        :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no :export no
     ;;; init-smartparens.el --- Configuration for smartparens

     ;;; Commentary:
     ;; This file is tangled from init-smartparens.org.
     ;; Changes made here will be overwritten by changes to that Org file.

     ;;; Code:
   #+END_SRC

** Specify Dependencies                                            :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no :export no
     (require 'general)
     (require 'use-package)
   #+END_SRC

** Load ~smartparens~
   [[https://github.com/Fuco1/smartparens][Matus Goljer (Fuco1)'s package]] provides a minor mode "that deals with parens pairs and tries to be smart about it".

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package smartparens
       ;; Load this package eagerly.
       :demand

       ;; Hide this package's lighter.
       :diminish

       ;; Inform the bytecode compiler of the following functions.
       :commands (smartparens-global-mode)

       ;; Evaluate the following code after loading this package.
       :config
       <<smartparens/config>>)
   #+END_SRC

   It is desirable to have slightly different Smartparens behavior when editing LISPs.
   The following is a list of the LISP modes I edit in.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (defconst init-smartparens-lisp-modes
       '(cider-repl-mode
	 clojure-mode
	 emacs-lisp-mode
	 ielm-mode
	 lisp-mode
	 scheme-mode)
       "A list of LISP major modes.")
   #+END_SRC

   And the above modes' hooks:

   #+BEGIN_SRC emacs-lisp :tangle yes
     (defconst init-smartparens-lisp-mode-hooks
       '(cider-repl-mode-hook
	 clojure-mode-hook
	 emacs-lisp-mode-hook
	 ielm-mode-hook
	 lisp-mode-hook
	 scheme-mode-hook)
       "A list of LISP major mode hooks.")
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :DESCRIPTION: Code to be evaluated after ~smartparens~ has been loaded.
    :HEADER-ARGS+: :noweb-ref smartparens/config
    :END:

    Enable ~smartparens-mode~ globally.

    #+BEGIN_SRC emacs-lisp
      (smartparens-global-mode +1)
    #+END_SRC

** Load ~smartparens-config~
   ~smartparens-config~ configures ~smartparens~ for various programming languages.

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package smartparens-config
       ;; This package is provided as part of the following package.
       :straight smartparens

       ;; Load this package after the following packages.
       :after (smartparens)

       ;; Load this package eagerly.
       :demand)
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS+: :noweb-ref smartparens-config/config
    :END:

    Remove the single quote (') from the list of auto-paired character in LISPs.

    #+BEGIN_SRC emacs-lisp
      (sp-local-pair init-smartparens-lisps "'" nil :actions :rem)
    #+END_SRC

** Load ~evil-cleverparens~
   [[https://github.com/luxbock/evil-cleverparens][Llli Pieponnen (luxbock)'s package]] provides an "Evil normal-state minor-mode for editing lisp-like languages".

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package evil-cleverparens
       ;; Load this package after the following packages.
       :after (evil smartparens)

       ;; Inform the bytecode compiler of the following functions.
       :commands (init-smartparens/evil-move-beyond-eol)

       ;; Add the following hooks.
       :ghook
       <<evil-cleverparens/ghook>>

       ;; Evaluate the following code after loading this package.
       :config
       <<evil-cleverparens/config>>)
   #+END_SRC

*** Add Hooks (~:ghook~)
    :PROPERTIES:
    :DESCRIPTION: Add hooks related to ~evil-cleverparens~.
    :HEADER-ARGS+: :noweb-ref evil-cleverparens/ghook
    :END:

    Enable ~evil-cleverparens-mode~ for LISPs.

    #+BEGIN_SRC emacs-lisp
      (init-smartparens-lisp-mode-hooks #'evil-cleverparens-mode)
    #+END_SRC

    Let the cursor move past the end of lines in LISPs.

    #+BEGIN_SRC emacs-lisp
      (init-smartparens-lisp-mode-hooks #'init-smartparens/evil-move-beyond-eol)
    #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS+: :noweb-ref evil-cleverparens/config
    :DESCRIPTION: Code to be evaluated after ~evil-cleverparens~ has been loaded.
    :END:

    Allow the cursor to move past the end of lines to avoid [[https://github.com/luxbock/evil-cleverparens/issues/29][breaking "certain movement commands"]].

    #+BEGIN_SRC emacs-lisp
      (defun init-smartparens/evil-move-beyond-eol ()
	"Enable EVIL-MOVE-BEYOND-EOL."
	(setq evil-move-beyond-eol t))
    #+END_SRC

** Ending Boilerplate                                              :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-smartparens)
     ;;; init-smartparens.el ends here
   #+END_SRC
