#+TITLE: Version Control Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: HEADER-ARGS+ :noweb yes

#+BEGIN_SRC emacs-lisp :tangle yes
;;; init-version-control.el --- Configure version control features  -*- lexical-binding: t; -*-

;; Copyright (C) Joseph M LaFreniere (lafrenierejm)

;; Author: Joseph LaFreniere <joseph@lafreniere.xyz>
;; Keywords: frames
;; Version 1.0
;; Package-Requires: ((general) (use-package))

;; <<license>>

;;; Commentary:
;; <<commentary>>

;;; Code:
<<code>>

(provide 'init-version-control)
;;; init-version-control.el ends here
#+END_SRC

* License
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref license
:END:

#+BEGIN_SRC text
This file is not part of GNU Emacs.

Init Version Control is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Init Version Control is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with GNU Emacs.
If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

* Commentary
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref commentary
:END:

#+BEGIN_SRC text
This file is tangled from init-version-control.org.
Changes made here will be overwritten by changes to that Org file.
#+END_SRC


* Code
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref code
:END:

** Dependencies
#+BEGIN_SRC emacs-lisp
(require 'general)
(require 's)
(require 'use-package)
#+END_SRC

** VC-Agnostic
*** Diff HL
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  ;; Only load the package if the following condition is met.
  :if
  <<diff-hl/if>>

  ;; Load this package eagerly.
  :demand

  ;; Add the following auto-loading hooks.
  :ghook
  <<diff-hl/ghook>>

  ;; Inform the bytecode compiler about the following functions.
  :commands
  (global-diff-hl-mode)

  ;; Evaluate the following code before loading this package.
  :init
  <<diff-hl/init>>

  ;; Evaluate the following code after loading this package.
  :config
  <<diff-hl/config>>)
#+END_SRC

**** Conditional Loading
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref diff-hl/if
:END:

Diff HL depends on features added in Emacs 24.3.

#+BEGIN_SRC emacs-lisp
(version<= "24.3" emacs-version)
#+END_SRC

**** Auto-Loading Hooks
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref diff-hl/ghook
:END:

Enable Diff HL in Dired buffers.

#+BEGIN_SRC emacs-lisp
('dired-mode-hook #'diff-hl-dired-mode)
#+END_SRC

Update Diff HL's status when refreshing with modern versions of Magit.

#+BEGIN_SRC emacs-lisp
('magit-post-refresh-hook #'diff-hl-magit-post-refresh)
#+END_SRC

**** Pre-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref diff-hl/init
:END:

Enable Diff HL's base minor mode globally.

#+BEGIN_SRC emacs-lisp
(global-diff-hl-mode)
#+END_SRC

**** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref diff-hl/config
:END:

Perform Diff HL highlighting on-the-fly.

#+BEGIN_SRC emacs-lisp
(diff-hl-flydiff-mode)
#+END_SRC

** Git
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  ;; Load this package if the following code evaluates to non-nil.
  :if
  <<magit/if>>

  ;; Inform the bytecode compiler of the following autoloaded functions.
  :commands magit-clone-to-xdg-source

  ;; Perform the following customizations.
  :custom
  <<magit/custom>>

  ;; Add the following keybindings.
  :general
  <<magit/general>>

  ;; Evaluate the following code after loading `magit'.
  :config
  <<magit/config>>)
#+END_SRC

**** Conditional Loading
:PROPERTIES:
:DESCRIPTION: Only load ~magit~ if this code evaluates to non-~nil~.
:HEADER-ARGS+: :noweb-ref magit/if
:END:

~magit~ is an interface for Git.
As such, it is worthless if =git= is not in the user's ~$PATH~.

#+BEGIN_SRC emacs-lisp
(executable-find "git")
#+END_SRC

**** Keybindings
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref magit/general
:END:

#+BEGIN_SRC emacs-lisp
("C-x g" #'magit-status)
#+END_SRC

**** Customize Variables
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref magit/custom
:END:

Set the list of messages Magit should not display.

#+BEGIN_SRC emacs-lisp
(magit-no-message '("Turning on magit-auto-revert-mode...") "Suppress messages")
#+END_SRC

Hide the stash and ignored file sections by default in status buffers.

#+BEGIN_SRC emacs-lisp
(magit-section-initial-visibility-alist
 '((ignored . hide)
   (stashes . hide)
   (untracked . hide)))
#+END_SRC

Set the sections to be displayed in status buffers.

#+BEGIN_SRC emacs-lisp
(magit-status-sections-hook
 '(magit-insert-status-headers
   magit-insert-merge-log
   magit-insert-rebase-sequence
   magit-insert-am-sequence
   magit-insert-sequencer-sequence
   magit-insert-bisect-output
   magit-insert-bisect-rest
   magit-insert-bisect-log
   magit-insert-ignored-files
   magit-insert-untracked-files
   magit-insert-unstaged-changes
   magit-insert-staged-changes
   magit-insert-stashes
   magit-insert-unpushed-to-pushremote
   magit-insert-unpushed-to-upstream-or-recent
   magit-insert-unpulled-from-pushremote
   magit-insert-unpulled-from-upstream))
#+END_SRC

**** Pre-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref magit/init
:DESCRIPTION: Code to evaluate before loading Magit.
:END:

Store the usernames used by the current user.
#+BEGIN_SRC emacs-lisp
(defconst magit-push-usernames '("lafrenierejm")
  "The Git forge usernames whose repos this Emacs user has push access to.")
#+END_SRC

Store the domains where this user has global Git push access.
#+BEGIN_SRC emacs-lisp
(defconst magit-push-domains '()
  "The domains where this Emacs user has global Git push access.")
#+END_SRC

**** Post-Load Execution
:PROPERTIES:
:DESCRIPTION: The code in this section shall be evaluated after ~magit~ has been loaded.
:HEADER-ARGS+: :noweb-ref magit/config
:END:

***** Return After Commit Message
Return to the main Magit window after closing a commit message, regardless of whether that message is committed or aborted.

#+BEGIN_SRC emacs-lisp
(advice-add 'git-commit-commit :after #'delete-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(advice-add 'git-commit-abort :after #'delete-window)
#+END_SRC

***** Automatically Register Repositories with Projectile
Define a function to perform the registration.
#+BEGIN_SRC emacs-lisp
(defun init-version-control/magit-add-known-project (&rest _)
  "Register the current repository's root with Projectile."
  (interactive)
  (when (and (fboundp #'projectile-add-known-project)
             magit--default-directory)
    (projectile-add-known-project magit--default-directory)))
#+END_SRC

Add the above function to be run after ~magit-status~.
#+BEGIN_SRC emacs-lisp
(advice-add
 'magit-status-internal
 :after
 #'init-version-control/magit-add-known-project)
#+END_SRC

***** Clone Directly to =$XDG_SOURCE_DIR=
I want to be able to pass a URL like https://gitlab.com/lafrenierejm/dotfiles/blob/master/.emacs.d and have it clone the containing repository to =$XDG_SOURCE_DIR/com.gitlab/lafrenierejm/dotfiles=.
If the repository is one that I have push access to, it shall be cloned using a Git URI.
Otherwise, the repo shall be cloned using an HTTPS URI.

#+BEGIN_SRC emacs-lisp
(defun magit-clone-to-xdg-source (uri)
  "Clone URI from DOMAIN to `$XDG_SOURCE_DIR'."
  (interactive "MClone repository: ")
  (when-let* ((xdg-source-dir (getenv "XDG_SOURCE_DIR"))
              (uri-prefix (cond
                           ((s-starts-with-p "git@" uri)
                            "git@")
                           ((s-starts-with-p "https://" uri)
                            "https://")))
              (uri-less-prefix (replace-regexp-in-string
                                (eval `(rx string-start ,uri-prefix))
                                ""
                                uri))
              (uri-split (s-split "/" (s-replace ":" "/" uri-less-prefix)))
              (domain (nth 0 uri-split))
              (username (nth 1 uri-split))
              (repo-name (nth 2 uri-split))
              (dns (s-join "." (reverse (s-split "\\." domain))))
              (parent-dir (s-join "/" (list xdg-source-dir dns username))))
    ;; Ensure the parent directory exists.
    (make-directory parent-dir t)
    ;; Determine whether to clone with push access.
    (let ((own-repo (or (s-starts-with-p "git" uri-prefix)
                        (seq-contains magit-push-usernames username)
                        (seq-contains magit-push-domains domain))))
      ;; Perform the clone.
      (magit-clone (concat (if own-repo "git@" "https://")
                           domain
                           (if own-repo ":" "/")
                           (s-join "/" (list username repo-name))
                           ".git")
                   (s-join "/" (list parent-dir repo-name))))))
#+END_SRC

***** Comparable Version Number
The function ~magit-version~ provided by Magit does not return a version string that is comparable using Emacs's built-in ~version<~.
However, Magit's semver is /par/ of the string returned by ~magit-version~;
it is everything before the first hyphen.

#+BEGIN_SRC emacs-lisp
(defun init-magit/version ()
  "Return Magit's version for use in comparisons."
  (car (split-string (magit-version) "-")))
#+END_SRC

*** Forge
From the project's README:
#+BEGIN_QUOTE
Work with Git forges, such as Github and Gitlab, from the comfort of Magit and the rest of Emacs.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package forge
  :disabled

  ;; Load this package after the following packages.
  :after (magit)

  ;; Load this package eagerly.
  :demand

  :straight
  (forge :type git :host github :repo "magit/forge"
         :fork (:host github :repo "lafrenierejm/forge")))
#+END_SRC

*** Evil Magit
~[[https://github.com/emacs-evil/evil-magit][evil-magit]]~ configures Evil and Magit to play well together.

#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  ;; Load this package eagerly.
  :demand

  ;; Load this package after the following packages.
  :after (:all evil magit)

  :general
  (:keymaps 'magit-mode-map
   :states 'normal
   "C-z" nil
   [escape] nil)

  :ghook
  <<evil-magit/ghook>>

  :custom
  <<evil-magit/custom>>)
#+END_SRC

**** Auto-Loading Hooks
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-magit/ghook
:END:

#+BEGIN_SRC emacs-lisp
('magit-mode-hook #'evil-local-mode)
#+END_SRC

**** Customize Variables
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-magit/custom
:END:

Determine which Evil state Evil Magit starts in.
#+BEGIN_SRC emacs-lisp
(evil-magit-state 'motion "Start `evil-magit' in the motion state.")
#+END_SRC

Determine whether Evil Magit uses Evil's movement keys.
#+BEGIN_SRC emacs-lisp
(evil-magit-want-horizontal-movement t "Enable Evil's horizontal movement in Magit buffers.")
#+END_SRC

*** SSH Agency
#+BEGIN_SRC emacs-lisp
(use-package ssh-agency
  :after magit

  :demand

  :custom
  (ssh-agency-add-executable (executable-find "ssh-add"))
  (ssh-agency-agent-executable (executable-find "ssh-agent"))
  (ssh-agency-agent-exe-names '("ssh-agent")))
#+END_SRC

*** Git Unlink
#+BEGIN_SRC emacs-lisp
(use-package git-unlink
  :demand)
#+END_SRC

*** Determine Year Added
Define a function to determine when a file was first created.
This is useful when adding determining information.
#+BEGIN_SRC emacs-lisp
(defun git-lafrenierejm-year-added (filename)
  (interactive "f")
  "Determine the year when FILENAME was added to a Git repository.

If the file has not been added to the repository, use the current year."
  (shell-command-to-string
   (format "{ %s || %s; } | tail -1 | head -c 4 -z"
           (s-join " " `("git" "log"
                         "--diff-filter=A"
                         "--follow"
                         "--format=%aI"
                         "--"
                         ,filename
                         ,(format "2>%s" null-device)))
           (format-time-string "%Y"))))
#+END_SRC

Alias the above function to remove my username.
#+BEGIN_SRC
(defalias 'git-year-added #'git-lafrenierejm-year-added)
#+END_SRC
