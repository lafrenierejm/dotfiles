#+TITLE: Minibuffer Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: HEADER-ARGS+ :noweb yes

#+BEGIN_SRC emacs-lisp :tangle yes
;;; init-minibuffer.el --- Configure minibuffer features

;; Copyright (C) Joseph M LaFreniere (lafrenierejm)

;; Author: Joseph LaFreniere <joseph@lafreniere.xyz>
;; Keywords: convenience
;; Version 1.0
;; Package-Requires: ((general) (use-package))

;; <<license>>

;;; Commentary:
;; <<commentary>>

;;; Code:
<<code>>

(provide 'init-minibuffer)
;;; init-minibuffer.el ends here
#+END_SRC

* License
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref license
:END:

#+BEGIN_SRC text
This file is not part of GNU Emacs.

Init Minibuffer is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Init Minibuffer is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with GNU Emacs.
If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

* Commentary
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref commentary
:END:

#+BEGIN_SRC text
This file is tangled from init-minibuffer.org.
Changes made here will be overwritten by changes to that Org file.
#+END_SRC

* Code
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref code
:END:
** Dependencies
#+BEGIN_SRC emacs-lisp
(require 'general)
(require 'use-package)
#+END_SRC

** Recursive Minibuffers

Recursive minibuffers allow for more complicated workflows.

#+BEGIN_SRC emacs-lisp
(setq enable-recursive-minibuffers t)
#+END_SRC

When recursive minibuffers are possible, it is helpful to keep track of the depth of recursion.

#+BEGIN_SRC emacs-lisp
(minibuffer-depth-indicate-mode)
#+END_SRC

** Flx
~[[https://github.com/lewang/flx][Flx]]~ provides fuzzy searching algorithms.
Ivy's fuzzy finding will use Flx's scoring mechanism if Flx is loaded.

#+BEGIN_SRC emacs-lisp
(use-package flx
  ;; Load this package eagerly.
  :demand

  ;; Evaluate the following code before loading this package.
  :init
  <<flx/config>>)
#+END_SRC

*** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref flx/config
:DESCRIPTION: Code to evaluated after ~flx~ has been loaded.
:END:

Run Emacs's garbage collector only when at least 20 MB have been allocated.
Doing so greatly improves ~flx~'s performance when working with large sets.

#+BEGIN_SRC emacs-lisp
(when (> 20000000 gc-cons-threshold)
  (setq gc-cons-threshold 20000000))
#+END_SRC

** Ivy
From the project's README:
#+BEGIN_QUOTE
Ivy is a generic completion mechanism for Emacs.
While it operates similarly to other completion schemes such as =icomplete-mode=, Ivy aims to be more efficient, smaller, simpler, and smoother to use yet highly customizable.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package ivy
  ;; Load this package after the following packages.
  :after (flx)

  ;; Load this package eagerly.
  :demand

  ;; Hide the lighter text provided by this package.
  :diminish ivy-mode

  ;; Inform the byte-code compiler of the existence of the following functions.
  :commands (ivy-mode ivy-format-function-line)

  ;; Add the following keybindings.
  :general
  <<ivy/general>>

  ;; Apply the following customizations.
  :custom
  <<ivy/custom>>

  ;; Evaluate the following code after loading this package.
  :config
  <<ivy/config>>)
#+END_SRC

*** Keybindings
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref ivy/general
:END:

Shadow ~switch-to-buffer~ with ~ivy-switch-buffer~.

#+BEGIN_SRC emacs-lisp
("C-x C-b" #'ivy-switch-buffer)
#+END_SRC

When in an Ivy buffer, press =C-<return>= to use the current input verbatim.

#+BEGIN_SRC emacs-lisp
(:keymaps 'ivy-minibuffer-map
 "M-<return>" #'ivy-immediate-done)
#+END_SRC

*** Variable Customization
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref ivy/custom
:END:

#+BEGIN_SRC emacs-lisp
(ivy-display-style 'fancy "Highlight the matching parts of the regexp in the minibuffer.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(ivy-format-function #'ivy-format-function-line "Extend line highlighting to the right.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(ivy-use-virtual-buffers t "Show recently killed buffers when calling `ivy-switch-buffer'.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(ivy-re-builders-alist '((t . ivy--regex-plus)) "Use `ivy--regex-plus' as the default matching function.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(ivy-extra-directories nil "Do not show './' or '../' in the filename completion list.")
#+END_SRC

*** Post-Load Evaluation
:PROPERTIES:
:DESCRIPTION: Code to evaluate after ~ivy~ has been loaded.
:HEADER-ARGS+: :noweb-ref ivy/config
:END:

Enable ~ivy-mode~ globally.

#+BEGIN_SRC emacs-lisp
(ivy-mode +1)
#+END_SRC

Do not include TRAMP buffers in Ivy's buffer lists.

#+BEGIN_SRC emacs-lisp
(setq ivy-ignore-buffers
      (cons (rx line-start "*tramp/"
                (one-or-more (not whitespace))
                whitespace
                (one-or-more anything)
                "*" line-end)
            ivy-ignore-buffers))
#+END_SRC

** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  ;; Load this package after the following packages.
  :after (ivy)

  ;; Load this package eagerly.
  :demand

  ;; Perform the following keybindings.
  :general
  ("C-h k" #'counsel-descbinds)
  ("C-x C-4 C-b" #'switch-to-buffer-other-window)
  ("C-x C-4 C-f" #'find-file-other-window)
  ("C-x C-4 b" #'switch-to-buffer-other-window)
  ("C-x C-f" #'counsel-find-file)
  ("C-x f" #'counsel-find-file)
  ("M-x" #'counsel-M-x))
#+END_SRC

** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  ;; Load this package eagerly.
  :demand

  ;; Load this package after the following packages.
  :after (ivy)

  ;; Perform the following keybindings.
  :general
  ("C-s" #'swiper-isearch)
  (:keymaps '(normal movement visual)
            "/" #'swiper-isearch))
#+END_SRC

** Ivy Rich
#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  ;; Load this package after the following packages.
  :after (ivy)

  ;; Load this package eagerly.
  :demand

  ;; Apply the following customizations.
  :custom
  <<ivy-rich/custom>>

  ;; Evaluate the following code after loading this package.
  :config
  <<ivy-rich/config>>)
#+END_SRC

*** Variable Customizations
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref ivy-rich/custom
:END:

#+BEGIN_SRC emacs-lisp
(ivy-virtual-abbreviate 'abbreviate "Abbreviate virtual buffer names.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(ivy-rich-path-style 'relative "Show paths relative their the project home.")
#+END_SRC

*** Post-Load Evaluation
:PROPERTIES:
:DESCRIPTION: Code to evaluate after loading ~ivy-rich~.
:HEADER-ARGS+: :noweb-ref ivy-rich/config
:END:

Enable ~ivy-rich-mode~ globally.

#+BEGIN_SRC emacs-lisp
(ivy-rich-mode 1)
#+END_SRC

Add support for ~counsel-projectile-switch-to-buffer~, mirroring that of ~ivy-switch-buffer~.

#+BEGIN_SRC emacs-lisp
(setq ivy-rich--display-transformers-list
      (plist-put
       ivy-rich--display-transformers-list
       'counsel-projectile-switch-to-buffer
       (plist-get ivy-rich--display-transformers-list 'ivy-switch-buffer)))
#+END_SRC
