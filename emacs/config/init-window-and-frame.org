#+TITLE: Window- and Frame-Related Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: header-args+ :comments link
#+PROPERTY: header-args+ :tangle no

* Introductory Boilerplate                                         :noexport:
  #+HEADER: :padline no
  #+HEADER: :comments no
  #+BEGIN_SRC emacs-lisp :tangle yes
    ;;; init-window-and-frame.el --- Configure window- and frame-related features

    ;; Copyright (C) Joseph M LaFreniere (lafrenierejm)

    ;; Author: Joseph LaFreniere <joseph@lafreniere.xyz>
    ;; Keywords: frames
    ;; Version 1.0
    ;; Package-Requires: ((general) (use-package))

    ;; This file is not part of GNU Emacs.

    ;; Init Window and Frame is free software: you can redistribute it and/or modify
    ;; it under the terms of the GNU General Public License as published by the Free
    ;; Software Foundation, either version 3 of the License, or (at your option) any
    ;; later version.

    ;; Init Window and Frame is distributed in the hope that it will be useful, but
    ;; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    ;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
    ;; more details.

    ;; You should have received a copy of the GNU General Public License along with
    ;; GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

    ;;; Commentary:

    ;; This file is tangled from init-window-and-frame.org.  Changes made here will
    ;; be overwritten by changes to that Org file.

    ;;; Code:
  #+END_SRC

* Specify Dependencies                                             :noexport:
  #+BEGIN_SRC emacs-lisp :tangle yes
    (require 'general)
    (require 'use-package)
  #+END_SRC

* Load EXWM
  From the package's README:
  #+BEGIN_QUOTE
  EXWM (Emacs X Window Manager) is a full-featured tiling X window manager for Emacs built on top of XELB.
  It features:

  - Fully keyboard-driven operations
  - Hybrid layout modes (tiling & stacking)
  - Dynamic workspace support
  - ICCCM/EWMH compliance
  - (Optional) RandR (multi-monitor) support
  - (Optional) Built-in system tray
  #+END_QUOTE

  #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
    (use-package exwm
      ;; Do not load the package lazily.
      :demand

      ;; Customize the following variables.
      :custom
      <<exwm/custom>>

      ;; Add the following function hooks.
      :gfhook
      <<exwm/gfhook>>

      ;; Execute the following code after the package has been loaded.
      :config
      <<exwm/config>>)
  #+END_SRC

** Variable Customization
   :PROPERTIES:
   :HEADER-ARGS+: :noweb-ref exwm/custom
   :END:

   Only enable a single workspace.
   Buffer switching with e.g. Counsel is preferred to using multiple workspaces.

   #+BEGIN_SRC emacs-lisp
     (exwm-workspace-number 1)
   #+END_SRC

** Non-Auto-Loading Hooks
   :PROPERTIES:
   :HEADER-ARGS+: :noweb-ref exwm/gfhook
   :END:

   Use Firefox windows' names as the windows' buffers names.

   #+BEGIN_SRC emacs-lisp
     ('exwm-update-title-hook
      (defun init-window-and-frame/update-title ()
        "Use Firefox windows' names as the windows' buffers names."
	(when (string-match "Firefox" exwm-class-name)
	  (exwm-workspace-rename-buffer exwm-title))))
   #+END_SRC

   Add simulation keys for Firefox windows.

   #+BEGIN_SRC emacs-lisp
     ('exwm-manage-finish-hook
      (defun init-window-and-frame/set-firefox-simulation-keys ()
	(when (and exwm-class-name (string= exwm-class-name "Firefox"))
	  (exwm-input-set-local-simulation-keys
	   '(([?\C-s] . [?\C-f])
	     ([?\C-q] . [?\C-w])
	     ([?\C-t] . [?\C-n]))))))
   #+END_SRC

** Post-Load Evaluation (~:config~)
   :PROPERTIES:
   :HEADER-ARGS+: :noweb-ref exwm/config
   :END:

   Define a function to launch applications from the shell.
   Launching applications is performed by calling ~start-process-shell-command~.

   #+BEGIN_SRC emacs-lisp
     (defun init-window-and-frame/start-process (command)
       "Start a process via a shell command."
       (interactive (list (read-shell-command "$ ")))
       (start-process-shell-command command nil command))
   #+END_SRC

*** Keybindings
    Because Chromebooks have neither Super nor Hyper meta keys, the following keybindings shall use Meta prefixes.
    Unfortunately, keybindings using Meta are allowed by convention to be rebound by major and minor modes.
    This means the below keybindings are not necessarily /truly/ global.

    Effective use of EXWM requires the ability to return from ~char-mode~ to ~line-mode~.
    This will be performed with =M-r=.

    #+BEGIN_SRC emacs-lisp
      (exwm-input-set-key (kbd "s-r") #'exwm-reset)
    #+END_SRC

    Close the current window and kill its buffer.

    #+BEGIN_SRC emacs-lisp
      (exwm-input-set-key (kbd "s-Q") #'kill-buffer-and-window)
    #+END_SRC

    Close the current window without killing its buffer.

    #+BEGIN_SRC emacs-lisp
      (exwm-input-set-key (kbd "s-q") #'delete-window)
    #+END_SRC

    Run a shell command.

    #+BEGIN_SRC emacs-lisp
      (exwm-input-set-key (kbd "s-d") #'init-window-and-frame/start-process)
    #+END_SRC

    Open an Eshell buffer in the current buffer's location.

    #+BEGIN_SRC emacs-lisp
      (exwm-input-set-key (kbd "C-z") #'init-eshell/find-eshell-here)
    #+END_SRC

* Load Ace Window
  From the README of Oleh Krehel (abo-abo)'s Ace Window package:
  #+BEGIN_QUOTE
  This package aims to take the speed and predictability of ~windmove~ and pack it into a single key binding, similar to ~other-window~.
  #+END_QUOTE

  #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
    (use-package ace-window
      ;; Load this package eagerly.
      :demand

      ;; Add the following keybindings.
      :general
      ("s-a" #'ace-window)

      ;; Apply the following customizations.
      :custom
      <<ace-window/custom>>

      ;; Evaluate the following code before loading this package.
      :init
      <<ace-window/init>>)
  #+END_SRC

** Customize Variables (~:custom~)
   :PROPERTIES:
   :HEADER-ARGS+: :noweb-ref ace-window/custom
   :END:

   Use home row characters to label windows.

   #+BEGIN_SRC emacs-lisp
     (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
   #+END_SRC

   Issue a read-char even for one window.
   This allows more flexibility in what action is performed, i.e. more than just changing focus, at the cost of requiring more keystrokes for the single most common task of changing focus.

   #+BEGIN_SRC emacs-lisp
     (aw-dispatch-always t)
   #+END_SRC

   Show the ace window key in the mode line.
   This is useful for EXWM buffers which cannot display keys in the buffer itself.

   #+BEGIN_SRC emacs-lisp
     (ace-window-display-mode t)
   #+END_SRC

** Pre-Load Evaluation
   :PROPERTIES:
   :HEADER-ARGS+: :noweb-ref ace-window/init
   :END:

   Bind Ace Window to =M-o= in EXWM.

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'exwm
       (exwm-input-set-key (kbd "s-a") #'ace-window))
   #+END_SRC

* Ending Boilerplate                                               :noexport:
  #+BEGIN_SRC emacs-lisp :tangle yes
    (provide 'init-window-and-frame)
    ;;; init-window-and-frame.el ends here
  #+END_SRC
