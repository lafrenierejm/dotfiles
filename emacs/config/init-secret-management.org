#+TITLE: Secret Management
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: HEADER-ARGS+ :noweb yes

#+BEGIN_SRC emacs-lisp :tangle yes
;;; init-secret-management.el --- Secret management

;; Copyright (C) Joseph M LaFreniere (lafrenierejm)

;; Author: Joseph M LaFreniere <joseph@lafreniere.xyz>
;; Version 1.0
;; Package-Requires: ((general) (use-package))

;; <<license>>

;;; Commentary:
;; <<commentary>>

;;; Code:
<<code>>

(provide 'init-secret-management)
;;; init-secret-management.el ends here

#+END_SRC

* License
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref license
:END:

#+BEGIN_SRC text
This file is not part of GNU Emacs.

Init Secret Management is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Init Secret Management is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with GNU Emacs.
If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

* Commentary
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref commentary
:END:

#+BEGIN_SRC text
This file is tangled from init-secret-management.org.
Changes made here will be overwritten by changes to that Org file.
#+END_SRC

* Code
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref code
:END:

** Dependencies
#+BEGIN_SRC emacs-lisp
(require 'general)
(require 'use-package)
#+END_SRC

** Password Cache
#+BEGIN_SRC emacs-lisp
(use-package password-cache
  ;; Load this package eagerly.
  :demand

  ;; Apply the following customizations.
  :custom
  (password-cache-expiry nil "Do not expire cached passwords."))
#+END_SRC

** Auth Source Pass
Damien Cassou (DameinCassou)'s [[https://github.com/DamienCassou/auth-password-store][auth-source-pass]] package integrates Jason A. Donenfield (ZX2C4)'s [[https://www.passwordstore.org/][pass]] utility into Emacs's authentication mechanisms.

#+BEGIN_SRC emacs-lisp
(use-package auth-source-pass
  ;; Only load this package if the following code evaluates to non-nil.
  :if
  <<auth-source-pass/if>>

  ;; Load this package eagerly.
  :demand

  ;; Evaluate the following code after loading this package.
  :config
  <<auth-source-pass/config>>)
#+END_SRC

*** Conditional Loading (~:if~)
:PROPERTIES:
:DESCRIPTION: Only load ~auth-source-pass~ if this condition is met.
:HEADER-ARGS+: :noweb-ref auth-source-pass/if
:END:

~auth-source-pass~ is only usable if =pass= is available in the user's =$PATH=.

#+BEGIN_SRC emacs-lisp
(executable-find "pass")
#+END_SRC

*** Post-Load Evaluation
:PROPERTIES:
:DESCRIPTION: Code to evaluate after the parent package has been loaded
:HEADER-ARGS+: :noweb-ref auth-source-pass/config
:END:

Enable auth-source-password-store.

#+BEGIN_SRC emacs-lisp
(auth-source-pass-enable)
#+END_SRC

** Password Store
#+BEGIN_SRC emacs-lisp
(use-package password-store
  ;; Only load `password-store' if the following condition is met.
  :if
  <<password-store/if>>

  ;; Load `password-store' eagerly.
  :demand

  :custom
  (password-store-password-length 32 "Default password length"))
#+END_SRC

*** Conditional Loading (~:if~)
:PROPERTIES:
:DESCRIPTION: Only load ~password-store~ if the following code evaluates to non-~nil~.
:HEADER-ARGS+: :noweb-ref password-store/if
:END:

~password-store~ is only usable if =pass= is on the user's =$PATH=.

#+BEGIN_SRC emacs-lisp
(executable-find "pass")
#+END_SRC

** Ivy Pass
Ivy Pass is an Ivy interface for Password Store.

#+BEGIN_SRC emacs-lisp
(use-package ivy-pass
  ;; Only load this package if the evaluation of the following code is non-nil.
  :if
  <<password-store/if>>

  ;; Load this package after the following packages.
  :after (ivy password-store)

  ;; Add the following key bindings.
  :general
  ("C-x p" #'ivy-pass))
#+END_SRC

** EasyPG Assistant

#+BEGIN_SRC emacs-lisp
(use-package epa
  ;; Apply the following customizations.
  :custom
  <<epa/custom>>)
#+END_SRC

*** Variable Customization
:PROPERTIES:
:HEADER-ARGS: :noweb-ref epa/custom
:END:

#+BEGIN_SRC emacs-lisp
(epa-pinentry-mode 'loopback "Redirect all Pinentry queries to Emacs.")
#+END_SRC
