#+TITLE: Secret Management
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: header-args+ :comments link
#+PROPERTY: header-args+ :tangle no

* License
  All code sections in this file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no :export no
     ;;; init-secret-management.el --- Configure secret management

     ;;; Commentary:
     ;; This file is tangled from init-secret-management.org.
     ;; Changes made here will be overwritten by changes to that Org file.

     ;;; Code:
   #+END_SRC

** Dependencies
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'use-package)
   #+END_SRC

** Password Cache
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package password-cache
       ;; This package is included in Emacs, so it does not need to be downloaded.
       :straight nil

       ;; Load this package eagerly.
       :demand

       ;; Apply the following customizations.
       :custom
       (password-cache-expiry nil "Do not expire cached passwords."))
   #+END_SRC

** Auth Source Pass
   Damien Cassou (DameinCassou)'s [[https://github.com/DamienCassou/auth-password-store][auth-source-pass]] package integrates Jason A. Donenfield (ZX2C4)'s [[https://www.passwordstore.org/][pass]] utility into Emacs's authentication mechanisms.

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package auth-source-pass
       ;; Only load this package if the following code evaluates to non-nil.
       :if
       <<auth-source-pass/if>>

       ;; Load this package eagerly.
       :demand

       ;; Evaluate the following code after loading this package.
       :config
       <<auth-source-pass/config>>)
   #+END_SRC

*** Conditional Loading (~:if~)
    :PROPERTIES:
    :DESCRIPTION: Only load ~auth-source-pass~ if this condition is met.
    :HEADER-ARGS: :noweb-ref auth-source-pass/if
    :END:

    ~auth-source-pass~ is only usable if =pass= is available in the user's =$PATH=.

    #+BEGIN_SRC emacs-lisp :tangle no
      (executable-find "pass")
    #+END_SRC

*** Post-Load Execution
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref auth-source-pass/config
    :DESCRIPTION: Code to execute after the parent package has been loaded
    :END:

    Enable auth-source-password-store.

    #+BEGIN_SRC emacs-lisp :tangle no
      (auth-source-pass-enable)
    #+END_SRC

** Password Store
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package password-store
       ;; Only load `password-store' if the following condition is met.
       :if
       <<password-store/if>>

       ;; Load `password-store' eagerly.
       :demand

       :custom
       (password-store-password-length 32 "Default password length"))
   #+END_SRC

*** Conditional Loading (~:if~)
    :PROPERTIES:
    :DESCRIPTION: Only load ~password-store~ if the following code evaluates to non-~nil~.
    :HEADER-ARGS: :noweb-ref password-store/if
    :END:

    ~password-store~ is only usable if =pass= is on the user's =$PATH=.

    #+BEGIN_SRC emacs-lisp
      (executable-find "pass")
    #+END_SRC

** Ivy Pass
   Ivy Pass is an Ivy interface for Password Store.

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package ivy-pass
       ;; Only load this package if the evaluation of the following code is non-nil.
       :if
       <<password-store/if>>

       ;; Load this package after the following packages.
       :after (ivy password-store)

       ;; Add the following key bindings.
       :bind
       (("C-x p" . ivy-pass)))
   #+END_SRC

** Ending Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-secret-management)
     ;;; init-secret-management.el ends here
   #+END_SRC
