#+TITLE: Literate Programming Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: HEADER-ARGS+ :noweb yes

#+begin_src emacs-lisp :tangle yes
;;; init-literate.el --- Package description  -*- lexical-binding: t; -*-

;; Author: Joseph LaFreniere (lafrenierejm)
;; Keywords: convenience
;; Version: 0.0.1
;; Package-Requires: ((general) (use-package))

;; <<license>>

;;; Commentary:
;; <<commentary>>

;;; Code:
<<code>>

(provide 'init-literate)
;;; init-literate.el ends here
#+end_src

* License
#+HEADER: :noweb-ref license
#+BEGIN_SRC text
This file is not part of GNU Emacs.

Init Literate is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Init Literate is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with GNU Emacs.
If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

* Code
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref code
:END:
** Mandatory Dependencies
#+BEGIN_SRC emacs-lisp
(require 'general)
(require 'use-package)
#+END_SRC
** Polymode
From Polymode's [[https://polymode.github.io/][homepage]]:
#+BEGIN_QUOTE
Polymode is a framework for multiple major modes (MMM) inside a single Emacs buffer.
It is fast and has a simple but flexible object oriented design.
Creating new polymodes normally takes a few lines of code.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package polymode
  ;; Load this package eagerly.
  :demand)
#+END_SRC

** Org
*** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  ;; Load this package after the following packages.
  :after (validate)

  ;; Add the following non-autoloading hooks.
  :gfhook
  <<org/gfhook>>

  ;; Apply the following customizations.
  :custom
  <<org/custom>>)
#+END_SRC

**** Non-Autoloading Hooks
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref org/gfhook
:END:

Enable the following minor modes in all Org buffers:
- Flyspell Mode for on-the-fly spell checking
- Org Indent Mode to indent text according to outline structure
- wrap lines

#+BEGIN_SRC emacs-lisp
('org-mode-hook #'flyspell-mode)
('org-mode-hook #'org-indent-mode)
('org-mode-hook #'visual-line-mode)
#+END_SRC

**** Variable Customizations
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref org/custom
:END:

Preserve leading whitespace characters in source blocks when exporting.

#+BEGIN_SRC emacs-lisp
(org-src-preserve-indentation t)
(org-edit-src-content-indentation 0)
#+END_SRC

Edit source blocks in the current window.

#+BEGIN_SRC emacs-lisp
(org-src-window-setup 'current-window)
#+END_SRC

Highlight LaTeX snippets and environments in Org buffers.

#+BEGIN_SRC emacs-lisp
(org-highlight-latex-and-related '(latex))
#+END_SRC

Follow links with =RET= except when in table mode.

#+BEGIN_SRC emacs-lisp
(org-return-follows-link t)
#+END_SRC

Fontify code in source blocks.

#+BEGIN_SRC emacs-lisp
(org-src-fontify-natively t)
#+END_SRC

Do not require confirmation before evaluating source blocks.

#+BEGIN_SRC emacs-lisp
(org-confirm-babel-evaluate nil)
#+END_SRC

Set the workflow states.

#+BEGIN_SRC emacs-lisp
(org-todo-keywords '((sequence "TODO" "FEEDBACK" "VERIFY" "|"
                               "DELEGATED" "DONE(d!/!)" "|"
                               "CANCELED")))
#+END_SRC
*** Poly Org
Provide Polymode definitions for Org syntax/buffers.

#+BEGIN_SRC emacs-lisp
(use-package poly-org
  ;; Load this package eagerly.
  :demand)
#+END_SRC

*** Ox
Ox (Org eXport) allows exporting (publishing) Org-mode documents such as this one.

#+BEGIN_SRC emacs-lisp
(use-package ox
  ;; Load this package after the following packages.
  :after (validate)

  ;; Evlauate the following sexps after loading this package.
  <<ox/config>>)
#+END_SRC

**** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref ox/config
:END:

Allow =BIND= keywords to define local variable values at the time of export.

#+BEGIN_SRC emacs-lisp
(validate-setq org-export-allow-bind-keywords t)
#+END_SRC

*** Ox LaTeX
Ox LaTeX is a library used by Ox that provides exporting to TeX.

#+BEGIN_SRC emacs-lisp
(use-package ox-latex
  ;; Load this package after the following packages.
  :after (validate ox)

  ;; Evaluate the following sexps after loading this package.
  :config
  <<ox-latex/config>>)
#+END_SRC

**** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref ox-latex/config
:END:

Use the =listings= LaTeX package to typeset source code.

#+BEGIN_SRC emacs-lisp
(validate-setq org-latex-listings t)
#+END_SRC

Use =latexmk= with a LuaLaTeX backend to compile TeX exports if =latexmk= and its runtime dependencies are installed.

#+BEGIN_SRC emacs-lisp
(when (and (executable-find "latexmk")
           (executable-find "perl"))
  (validate-setq org-latex-pdf-process '("latexmk -lualatex -f %f")))
#+END_SRC

*** Evil Org
[[https://github.com/Somelauw/evil-org-mode][Evil Org mode]] is a minor mode that provides Evil keybindings for common Org mode actions.

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  ;; Load this package after the following packages.
  :after (:all evil org)

  ;; Hide the following text in the modeline.
  :diminish evil-org-mode

  ;; Add hooks.
  :ghook
  <<evil-org/ghook>>

  ;; Inform the bytecode compiler of the following functions.
  :functions
  (evil-org-set-key-theme)

  ;; Apply the following variable customizations.
  :custom
  <<evil-org/custom>>

  ;; Evaluate the following sexps after loading this package.
  :config
  <<evil-org/config>>)
#+END_SRC

**** Auto-Loading Hooks
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-org/ghook
:END:

Enable Evil Org mode in all Org mode buffers.

#+BEGIN_SRC emacs-lisp
('org-mode-hook #'evil-org-mode)
#+END_SRC

**** Variable Customization
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-org/custom
:END:

Specify the key themes to enable.

#+BEGIN_SRC emacs-lisp
(evil-org-key-theme
 '(calendar
   navigation
   insert
   textobjects))
#+END_SRC

Retain selection after typing =<= or =>= in visual state.

#+BEGIN_SRC emacs-lisp
(evil-org-retain-visual-state-on-shift t)
#+END_SRC

**** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref evil-org/config
:END:

Apply the keybindings specified in ~evil-org-key-theme~.

#+BEGIN_SRC emacs-lisp
  (evil-org-set-key-theme)
#+END_SRC

*** Smartparens
Smartparens's primary configuration is in [[file:init-char-matching.org][Init Char Matching]].

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  ;; Evaluate the following code after loading this package.
  :config
  <<smartparens/config>>)
#+END_SRC

**** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref smartparens/config
:END:

=== and =~= appear in pairs as surrounding markup.

#+BEGIN_SRC emacs-lisp
(sp-local-pair 'org-mode "=" "=")
(sp-local-pair 'org-mode "~" "~")
#+END_SRC

Remove ='= from the list of characters to be auto-paired.
I tend to the character primarily as an apostrophe in natural languages.

#+BEGIN_SRC emacs-lisp
(sp-local-pair 'org-mode "'" nil :actions nil)
#+END_SRC
