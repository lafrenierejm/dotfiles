#+TITLE: Character Matching Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: HEADER-ARGS+ :noweb yes

#+BEGIN_SRC emacs-lisp :tangle yes
;; init-char-matching.el --- Configure character matching  -*- lexical-binding: t; -*-

;; Copyright (C) Joseph LaFreniere (lafrenierejm)

;; Author: Joseph LaFreniere <joseph@lafreniere.xyz>
;; Keywords:
;; Version: 1.0
;; Package-Requires: ((general) (use-package))

;; <<license>>

;;; Commentary:
;; <<commentary>>

;;; Code:
<<code>>

(provide 'init-char-matching)
;;; init-char-matching.el ends here
#+END_SRC

* License
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref license
:END:

#+BEGIN_SRC text
This file is not part of GNU Emacs.

Init Char Matching is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Init Char Matching is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with GNU Emacs.
If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

* Commentary
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref commentary
:END:

#+BEGIN_SRC text
This file is tangled from init-char-matching.org.
Changes made here will be overwritten by changes to that Org file.
#+END_SRC

* Code
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref code
:END:

** Dependencies
#+BEGIN_SRC emacs-lisp
(require 'diminish)
(require 'general)
(require 'use-package)
#+END_SRC

** Smartparens
[[https://github.com/Fuco1/smartparens][Matus Goljer (Fuco1)'s package]] provides a minor mode "that deals with parens pairs and tries to be smart about it".

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  ;; Load this package eagerly.
  :demand

  ;; Hide this package's lighter.
  :diminish

  :custom
  <<smartparens/custom>>)
#+END_SRC

*** Variable Customization
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref smartparens/custom
:END:

Allow ~smartparens-mode~ to be enabled in ~minibuffer-inactive-mode~.

#+BEGIN_SRC emacs-lisp
(sp-ignore-modes-list (delete 'minibuffer-inactive-mode sp-ignore-modes-list))
#+END_SRC

Enable ~smartparens-mode~ globally.

#+BEGIN_SRC emacs-lisp
(smartparens-global-mode t)
#+END_SRC

** Smartparens Config
Smartparens Config configures Smartparens for various programming languages.

#+BEGIN_SRC emacs-lisp
(use-package smartparens-config
  ;; Load this package after the following packages.
  :after smartparens

  ;; Load this package eagerly.
  :demand)
#+END_SRC
** Simple
#+BEGIN_SRC emacs-lisp
(use-package simple
  ;; Load this package eagerly.
  :demand

  ;; Apply the following customizations.
  :custom
  <<simple/custom>>

  ;; Evaluate the following code after loading this package.
  :config
  <<simple/config>>)
#+END_SRC

*** Variable Customization
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref simple/custom
:END:

#+BEGIN_SRC emacs-lisp
(blink-matching-paren t "Highlight matching parentheses")
#+END_SRC

Set the style used when showing a matching paren.
#+BEGIN_SRC emacs-lisp
(show-paren-style 'parenthesis "Highlight maching parens.")
#+END_SRC

Set whether open parens are highlighted.
#+BEGIN_SRC emacs-lisp
(show-paren-highlight-openparen t "Highlight open parens.")
#+END_SRC

Set the behavior when ~point~ is immediately inside a paren.
#+BEGIN_SRC emacs-lisp
(show-paren-when-point-inside-paren "Show paren with `point' is just inside one.")
#+END_SRC

Set the behavior when ~point~ is in the same line as a closing paren.
#+BEGIN_SRC emacs-lisp
(show-paren-when-point-in-periphery "Show parens when `point' is in the line's periphery.")
#+END_SRC

Set whether ~show-paren-mode~ is globally enabled.
#+BEGIN_SRC emacs-lisp
(show-paren-mode t "Enable `show-paren-mode' globally.")
#+END_SRC

*** Post-Load Evaluation
:PROPERTIES:
:HEADER-ARGS+: :noweb-ref simple/config
:END:

**** Show Lines for Off-Screen Parentheses
This functionality is inspired by Clemens Radermacher's <with-emacs@posteo.org> post [[https://with-emacs.com/posts/editing/show-matching-lines-when-parentheses-go-off-screen/]["Show Matching Lines When Parentheses Go Off-Screen"]].
That blog post is copyright 2019 Clemens Radermacher and is licensed [[https://creativecommons.org/licenses/by-nc-sa/4.0/][CC BY-NC-SA 4.0]].
All code in this section falls under the same copyright and license.

The display of matching parentheses is configured via the variable ~blink-matching-paren~.
For this to work, ~blink-matching-paren~ needs to be ~t~;
that customization is performed in "Variable Customization".

First, the hooks on character insertion need to be modified:
#+BEGIN_SRC emacs-lisp
(remove-hook 'post-self-insert-hook #'blink-paren-post-self-insert-function)
#+END_SRC

Next, advice is added to ~show-paren-function~, the function that performs the visualization.
#+BEGIN_SRC emacs-lisp
(let ((ov nil)) ; keep track of the overlay
  (advice-add
   #'show-paren-function
   :after
   (defun show-paren--off-screen+ (&rest _args)
     "Display matching line for off-screen paren."
     (when (overlayp ov)
       (delete-overlay ov))
     ;; check if it's appropriate to show match info,
     ;; see `blink-paren-post-self-insert-function'
     (when (and (overlay-buffer show-paren--overlay)
                (not (or cursor-in-echo-area
                         executing-kbd-macro
                         noninteractive
                         (minibufferp)
                         this-command))
                (and (not (bobp))
                     (memq (char-syntax (char-before)) '(?\) ?\$)))
                (= 1 (logand 1 (- (point)
                                  (save-excursion
                                    (forward-char -1)
                                    (skip-syntax-backward "/\\")
                                    (point))))))
       ;; rebind `minibuffer-message' called by
       ;; `blink-matching-open' to handle the overlay display
       (cl-letf (((symbol-function #'minibuffer-message)
                  (lambda (msg &rest args)
                    (let ((msg (apply #'format-message msg args)))
                      (setq ov (display-line-overlay+
                                (window-start) msg ))))))
         (blink-matching-open))))))
#+END_SRC


To create the overlay, Radermacher wrote the following helper function:
#+BEGIN_SRC emacs-lisp
(defun display-line-overlay+ (pos str &optional face)
  "Display line at POS as STR with FACE.

FACE defaults to inheriting from default and highlight."
  (let ((ol (save-excursion
              (goto-char pos)
              (make-overlay (line-beginning-position)
                            (line-end-position)))))
    (overlay-put ol 'display str)
    (overlay-put ol 'face
                 (or face '(:inherit default :inherit highlight)))
    ol))
#+END_SRC
