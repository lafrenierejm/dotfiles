#+TITLE: Org mode Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz

* License
  All code sections in this =.org= file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][the ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains my configuration for [[http://orgmode.org/][Org mode]].
  Org-mode itself is loaded in =[[file:~/.emacs.d/init.org][init.org]]= because =org-babel-tangle= was required to tangle this file.
  This file is written in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].

* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     ;;; init-org.el --- Configuration for Org-mode

     ;;; Commentary:
     ;; This file is tangled from init-org.org.
     ;; Changes made here will be overwritten by changes to that Org-mode file.

     ;;; Code:
   #+END_SRC

** Dependencies
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     (require 'use-package)
   #+END_SRC

** Load ~org~
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package org
       ;; This package is included in GNU Emacs.
       :straight nil

       :after (validate)

       ;; Evaluate the following sexps after loading `org'.
       :config
       <<org/config>>)
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref org/config
    :END:
    Edit source blocks in the current window.

    #+BEGIN_SRC emacs-lisp
      (validate-setq org-src-window-setup 'current-window)
    #+END_SRC

    Settings.

    #+BEGIN_SRC emacs-lisp
      (validate-setq org-highlight-latex-and-related '(latex)
                     org-return-follows-link t
                     org-src-fontify-natively t
                     org-confirm-babel-evaluate nil)
    #+END_SRC

    Set the workflow states.
    Unfortunately, [[https://github.com/Malabarba/validate.el/issues/5][an issue]] with ~validate~ prevents using ~validate-setq~ to set the states.

    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords '((sequence "TODO" "FEEDBACK" "VERIFY" "|"
                                          "DELEGATED" "DONE(d!/!)" "|"
                                          "CANCELED")))
    #+END_SRC

    Enable minor modes in all ~org~ buffers.

    #+BEGIN_SRC emacs-lisp
      (dolist (minor-mode (list
                           'flyspell-mode
                           'visual-line-mode))
        (add-hook 'org-mode-hook minor-mode))
    #+END_SRC

** Load ~ox~
   ~ox~ (short for Org eXport) allows exporting (publishing) Org-mode documents such as this one.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ox
       ;; This package is included in the following package.
       :straight nil ;; org

       ;; Load `ox' after the following packages.
       :after (validate)

       ;; Evlauate the following sexps after loading `ox'.
       <<ox/config>>)
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref ox/config
    :END:

    Allow =BIND= keywords to define local variable values at the time of export.

    #+BEGIN_SRC emacs-lisp
      (validate-setq org-export-allow-bind-keywords t)
    #+END_SRC

** Load ~ox-latex~
   ~ox-latex~ is a library used by ~ox~ that provides exporting to TeX.

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package ox-latex
       ;; This package is included in the following package.
       :straight nil ; org

       ;; Load `ox' after the following packages.
       :after (validate)

       ;; Evaluate the following sexps after loading `ox'.
       :config
       <<ox-latex/config>>)
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref ox-latex/config
    :END:
    Use the =listings= LaTeX package to typeset source code.

    #+BEGIN_SRC emacs-lisp
      (validate-setq org-latex-listings t)
    #+END_SRC

    Use =latexmk= with a LuaLaTeX backend to compile TeX exports if =latexmk= and its runtime dependencies are installed.

    #+BEGIN_SRC emacs-lisp
      (when (and (executable-find "latexmk")
                 (executable-find "perl"))
        (validate-setq org-latex-pdf-process '("latexmk -lualatex -f %f")))
    #+END_SRC

** Load ~ox-moderncv~
   From the [[https://titan-c.gitlab.io/org-cv/][the package's website]]:
   #+BEGIN_QUOTE
   This project aims to generate from an org-mode file with reasonably ordered items a latex file which compiles into a reasonably nice CV.
   In the same spirit[,] the org-mode file must export to markdown so that it can be use[d] for web based CV.
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ox-moderncv
       :straight (ox-moderncv :type git :host gitlab :repo "lafrenierejm/org-cv"
			      :upstream (:host gitlab :repo "Titan-C/org-cv"))

       ;; Load this package eagerly.
       :demand

       ;; Load this package after the following packages.
       :after (ox-latex))
   #+END_SRC

** Load ~ob-prolog~
   ~[[https://github.com/ljos/ob-prolog][ob-prolog]]~ by Bjarte Johansen (ljos) <[[mailto:Bjarte.Johansen@gmail.com][Bjarte.Johansen@gmail.com]]> as Org-babel support for Prolog.

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package ob-prolog
       ;; Only load this package if the following code evaluates to non-nil.
       :if
       <<ob-prolog/if>>

       ;; Evaluate the following sexps after loading `ob-prolog'.
       :config
       <<ob-prolog/config>>)
   #+END_SRC

*** Conditional Loading (~:if~)
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref ob-prolog/if
    :DESCRIPTION: Only load ~ob-prolog~ if this condition is met.
    :END:

    Adding Babel support for Prolog is useless unless a Prolog interpreter is available on the user's =$PATH=.
    Thus far, the only Prolog interpreter I have used is =swipl=.

    #+BEGIN_SRC emacs-lisp
      (executable-find "swipl")
    #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref ob-prolog/config
    :DESCRIPTION: Code to be executed after ob-prolog has been loaded.
    :END:

    Add Prolog to the list of languages available to Babel.

    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages 'org-babel-load-languages
                                   '((prolog .t )))
    #+END_SRC

** Load ~evil-org~
   [[https://github.com/Somelauw/evil-org-mode][Evil Org mode]] is a minor mode that provides Evil keybindings for common Org mode actions.

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package evil-org
       ;; Load this package after the following packages.
       :after (evil org validate)

       ;; Hide the following text in the modeline.
       :diminish evil-org-mode

       ;; Add the following values onto their keys' hooks.
       :hook ((org-mode . evil-org-mode)
	      (evil-org-mode . evil-org-set-key-theme))

       ;; Inform the bytecode compiler of the following functions.
       :commands (evil-org-set-key-theme)

       ;; Evaluate the following sexps after loading this package.
       :config
       <<evil-org/config>>)
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref evil-org/config
    :END:

    Choose the keybinding themes to enable.

    #+BEGIN_SRC emacs-lisp
      (validate-setq evil-org-key-theme '(calendar
					  navigation
					  insert
					  return
					  textobjects))
    #+END_SRC

    Retain selection after typing =<= or =>= in visual state.

    #+BEGIN_SRC emacs-lisp
      (validate-setq evil-org-retain-visual-state-on-shift t)
    #+END_SRC

** Ending Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-org)
     ;;; init-org.el ends here
   #+END_SRC
