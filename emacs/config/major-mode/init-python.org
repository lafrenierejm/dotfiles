#+TITLE: Python Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz

* License
  All code sections in this file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains my configuration for working with Python.
  This file is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].

* Code
** Introductory Boilerplate                                        :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     ;;; init-python.el --- Configuration for working with Python

     ;;; Commentary:
     ;; This file is tangled from init-python.org.
     ;; Changes made here will be overwritten by changes to that Org-mode file.

     ;;; Code:
   #+END_SRC

** Specify Dependencies                                            :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'use-package)
   #+END_SRC

** Load ~python~
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package python
       ;; This package is included with Emacs.
       :straight nil

       ;; Evaluate the following code after loading `python'.
       :config
       <<python/config>>)
   #+END_SRC

*** Post-Load Evaluation (~:config~)
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref python/config
    :END:

    Precede inline (i.e. end-of-line) comments with two spaces, per PEP 8.

    #+BEGIN_SRC emacs-lisp :tangle no
      (defun init-python/set-comment-inline-offset ()
	(set (make-local-variable 'comment-inline-offset) 2))
      (add-hook 'python-mode-hook #'init-python/set-comment-inline-offset)
    #+END_SRC

** Load ~pyvenv~
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package pyvenv
       ;; Load this package after the following packages.
       :after (python))
   #+END_SRC
** Ending Boilerplate                                              :noexport:
  #+BEGIN_SRC emacs-lisp :tangle yes
    (provide 'init-python)
    ;;; init-python.el ends here
  #+END_SRC
