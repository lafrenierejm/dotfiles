#+TITLE: Git Attributes Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz

* License
  All code sections in this file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains a configuration for working with Git's attributes files.
  This file is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].

* Code
** Introductory Boilerplate					   :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     ;;; init-git-attributes.el --- Configuration for Git attributes files

     ;;; Commentary:
     ;; This file is tangled from init-git-attributes.org.
     ;; Changes made here will be overwritten by changes to that Org-mode file.

     ;;; Code:
   #+END_SRC

** Specify Dependencies						   :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'use-package)
   #+END_SRC

** Load gitattributes-mode
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package gitattributes-mode
       :mode
       <<gitattributes-mode/mode>>)
   #+END_SRC

*** Filename Mapping
    Emacs maps filenames to functions using the ~auto-mode-alist~ variable.
    Each key in ~auto-mode-alist~ is a regex describing a filename;
    Each value is a function, in most cases one that enables a major mode.

    The following file paths describe Git attributes files and corresponding regexes.
    ~rx~ is used to form the regular expressions as I find its syntax to be more readable than Emacs's raw regex.
    - =.gitattributes=, labeled =rx-gitattributes=
      #+HEADER: :noweb-ref rx-gitattributes
      #+BEGIN_SRC emacs-lisp
        (rx ".gitattributes" string-end)
      #+END_SRC
    - =.git/info/attributes=, labeled =rx-git-info-attributes=
      #+HEADER: :noweb-ref rx-git-info-attributes
      #+BEGIN_SRC emacs-lisp
        (rx ".git/info/attributes" string-end)
      #+END_SRC
    - =git/attributes=, labeled =rx-git-attributes=
      #+HEADER: :noweb-ref rx-git-attributes
      #+BEGIN_SRC emacs-lisp
        (rx "git/attributes" string-end)
      #+END_SRC


    The ~:mode~ keyword in ~use-package~ adds to ~auto-mode-alist~.
    One of the valid specifiers to the keyword is an alist whose keys are regexes and whose values are functions.
    In our case, we want to use the regexes from above as the keys and ~gitattributes-mode~ as the each value.
    The key of each element is an evaluated ~rx~ sexp.
    The value of each element is ~gitattributes-mode~.

    #+HEADER: :noweb no-export
    #+HEADER: :results verbatim org
    #+BEGIN_SRC emacs-lisp
      (let ((alist ())
            (regexes (list <<rx-gitattributes>>
                           <<rx-git-info-attributes>>
                           <<rx-git-attributes>>)))
        (dolist (regex regexes)
          (push (cons regex 'gitattributes-mode) alist))
        alist)
    #+END_SRC

    The result of evaluating the above code is labeled =gitattributes-mode/mode= for noweb:

    #+RESULTS:
    #+HEADER: :noweb-ref gitattributes-mode/mode
    #+BEGIN_SRC emacs-lisp
      (("git/attributes\\'" . gitattributes-mode) ("\\.git/info/attributes\\'" . gitattributes-mode) ("\\.gitattributes\\'" . gitattributes-mode))
    #+END_SRC

** Ending Boilerplate 						   :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-git-attributes)
     ;;; init-git-attributes.el ends here
   #+END_SRC
