#+TITLE: mu4e Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz

* License
  All code sections in this =.org= file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains configuration for [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]].
  It is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].

* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     ;;; init-mu4e.el --- mu4e initialization

     ;;; Commentary:
     ;; This file is tangled from init-mu4e.org.
     ;; Changes made here will be overwritten by changes to that Org-mode file.

     ;;; Code:
   #+END_SRC

** Dependencies
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     (require 'use-package)
   #+END_SRC

** Load mu4e
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package mu4e
       ;; Do not defer loading.
       :demand

       ;; Do not download using straight.el
       :straight nil

       ;; Load the parent package after the following packages.
       :after (anaphora flyspell ispell s validate)

       ;; Add the following directories to `load-path'.
       :load-path ("site-lisp/mu4e")

       ;; Execute the following code after loading the package.
       :config
       <<mu4e/config>>)
   #+END_SRC

*** Post-Load Execution
    :PROPERTIES:
    :noweb-ref: mu4e/config
    :END:

**** Fetching Mail
     #+BEGIN_SRC emacs-lisp
       (validate-setq mu4e-get-mail-command "mbsync -a")
       (validate-setq mu4e-change-filenames-when-moving t)
     #+END_SRC

**** Reading Mail
     Use ISO-esque timestamps in the header.

     #+BEGIN_SRC emacs-lisp
       (validate-setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
     #+END_SRC

     Show senders' full addresses in message view.

     #+BEGIN_SRC emacs-lisp
       (validate-setq mu4e-view-show-addresses t)
     #+END_SRC

**** Mail Directory
     Set the path to my mail directory.

     #+BEGIN_SRC emacs-lisp
       (awhen (getenv "MAILDIR")
	 (validate-setq mu4e-maildir it))
     #+END_SRC

**** Sending Mail
     Choose how mail is sent, preferring =msmtp= to the built-in =smtpmail-send-it=.

     #+BEGIN_SRC emacs-lisp :noweb yes
       (acond ((executable-find "msmtp")
	       <<mu4e/config/sending/msmtp>>)
	      (t
	       <<mu4e/config/sending/smtpmail-send-it>>))
     #+END_SRC

     Use the value from the mail's header as the FROM field.

     #+BEGIN_SRC emacs-lisp
       (validate-setq message-sendmail-envelope-from 'header)
     #+END_SRC

     Close the message buffer after sending its message.

     #+BEGIN_SRC emacs-lisp
       (validate-setq message-kill-buffer-on-exit t)
     #+END_SRC

***** msmtp Configuration
      :PROPERTIES:
      :noweb-ref: mu4e/config/sending/msmtp
      :END:

      Provide settings for using =msmtp= to send mail.
      ~it~ is inherited from the reference of this expression in an ~acond~'s body;
      the value of ~it~ will be the full path to the =msmtp= executable.

      #+BEGIN_SRC emacs-lisp
	(validate-setq
	 message-send-mail-function 'message-send-mail-with-sendmail
	 sendmail-program it)
      #+END_SRC

      Supply an account label (option =-a=) to =msmtp= based on the mu4e context.

     #+BEGIN_SRC emacs-lisp
       (defun init-mu4e/choose-msmtp-account ()
	 "Choose msmtp account label based on mu4e context name."
	 (when (message-mail-p)
	   (let ((account-name
		  ;; Replace "@" with "." in the current context name.
		  (s-replace "@" "." (mu4e-context-name (mu4e-context-current)))))
	     (validate-setq
	      message-sendmail-extra-arguments (list '"-a" account-name)))))
       (add-hook 'message-send-mail-hook 'init-mu4e/choose-msmtp-account)
     #+END_SRC

***** ~smtpmail-send-it~ Configuration
      :PROPERTIES:
      :noweb-ref: mu4e/config/sending/smtpmail-send-it
      :END:

      Provide settings for using ~smtpmail-send-it~ to send mail.

      #+BEGIN_SRC emacs-lisp
	(validate-setq
	 message-send-mail-function 'smtpmail-send-it
	 send-mail-function 'smtpmail-send-it
	 ;; Set the port number.
	 smtpmail-smtp-service 587
	 ;; Set the type of connection.
	 smtpmail-stream-type 'starttls)
      #+END_SRC

**** My Addresses
     mu4e maintains a list of addresses whose presence in a message's From field means that the message was sent by me.
     In such cases, display the To address(es).

     #+BEGIN_SRC emacs-lisp
       (validate-setq
	mu4e-user-mail-address-list '("admin@lafreniere.xyz"
				      "jml140230@utdallas.edu"
				      "joseph.lafreniere@utdallas.edu"
				      "joseph@lafreniere.xyz"
				      "lafrenierejm@gmail.com"
				      "lafrenierejm@utdallas.edu"))
     #+END_SRC

**** Multiple Accounts
     #+BEGIN_SRC emacs-lisp
       ;; Configure mu4e for multiple accounts.
       (validate-setq
	mu4e-contexts `( ,(make-mu4e-context
			   ;; Name of the context
			   :name "edu.utdallas@jml140230"
			   ;; alist of variables to set for this context.
			   :vars '((user-full-name . "LaFreniere, Joseph")
				   (user-mail-address . "jml140230@utdallas.edu")
				   ;; SMTP
				   (smtpmail-smtp-server . "smtp.office365.com") ; hostname
				   (smtpmail-smtp-user . "jml140230@utdallas.edu") ; username
				   ;; Signature
				   (mu4e-compose-signature-auto-include . t)
				   (mu4e-compose-signature . "Joseph LaFreniere")
				   ;; Folders
				   (mu4e-archive-folder . "/edu.utdallas.jml140230/archive")
				   (mu4e-drafts-folder . "/edu.utdallas.jml140230/draft")
				   (mu4e-sent-folder .  "/edu.utdallas.jml140230/sent")
				   (mu4e-trash-folder . "/edu.utdallas.jml140230/trash"))
			   ;; =match-func= returns true when the passed message matches this context.
			   :match-func (lambda (msg)
					 (when msg
					   (mu4e-message-field msg :maildir)
					   (string-prefix-p "/edu.utdallas.jml140230"
							    (mu4e-message-field msg :maildir)))))
			 ,(make-mu4e-context
			   ;; Name of the context
			   :name "xyz.lafreniere@joseph"
			   ;; alist of variables to set for this context.
			   :vars '(
				   ;; From
				   (user-full-name . "LaFreniere, Joseph")
				   (user-mail-address . "joseph@lafreniere.xyz")
				   ;; Signature
				   (mu4e-compose-signature-auto-include . t)
				   (mu4e-compose-signature . "Joseph LaFreniere")
				   ;; SMTP
				   (smtpmail-smtp-server . "smtp.kolabnow.com") ; hostname
				   (smtpmail-smtp-user . "joseph@lafreniere.xyz") ; username
				   ;; Folders
				   (mu4e-archive-folder . "/xyz.lafreniere.joseph/archive")
				   (mu4e-drafts-folder . "/xyz.lafreniere.joseph/draft")
				   (mu4e-sent-folder .  "/xyz.lafreniere.joseph/sent")
				   (mu4e-trash-folder . "/xyz.lafreniere.joseph/trash"))
			   ;; =match-func= returns true when the passed message matches this context.
			   :match-func (lambda (msg)
					 (when msg
					   (mu4e-message-field msg :maildir)
					   (string-prefix-p "/xyz.lafreniere.joseph"
							    (mu4e-message-field msg :maildir)))))
			 ,(make-mu4e-context
			   ;; Name of the context
			   :name "com.gmail@utdlug"
			   ;; alist of variables to set for this context
			   :vars '(
				   ;; From
				   (user-full-name . "LaFreniere, Joseph")
				   (user-mail-address . "utdlug@gmail.com")
				   ;; Signature
				   (mu4e-compose-signature-auto-include . t)
				   (mu4e-compose-signature . "Joseph LaFreniere\nLinux Users Group at UT Dallas")
				   ;; SMTP
				   (smtpmail-smtp-server . "smtp.gmail.com") ; hostname
				   (smtpmail-smtp-user . "utdlug@gmail.com")  ; username
				   ;; Folders
				   (mu4e-archive-folder . nil)
				   (mu4e-drafts-folder . "/com.gmail.utdlug/draft")
				   (mu4e-sent-folder . "/com.gmail.utdlug/sent")
				   (mu4e-trash-folder . nil))
			   :match-func (lambda (msg)
					 (when msg
					   (mu4e-message-field msg :maildir)
					   (string-prefix-p "/com.gmail.utdlug"
							    (mu4e-message-field msg :maildir)))))))
     #+END_SRC

**** Composing Mail

     Use =[[https://joeclark.org/ffaq.html][format=flowed]]= for nicer viewing of plaintext mail.

     #+BEGIN_SRC emacs-lisp
       (validate-setq mu4e-compose-format-flowed t)
     #+END_SRC

     Do not open a new frame when composing mail.

     #+BEGIN_SRC emacs-lisp
       (validate-setq mu4e-compose-in-new-frame nil)
     #+END_SRC

     If a signature is set, automatically include it.

     #+BEGIN_SRC emacs-lisp
       (validate-setq mu4e-compose-signature-auto-include t)
     #+END_SRC

     Show trailing whitespace.
     This is helpful when composing or viewing =format=flowed= mail.

     #+BEGIN_SRC emacs-lisp
       ;; Show trailing whitespace in the current buffer.
       (defun init-mu4e/show-trailing-whitespace ()
	 (validate-setq show-trailing-whitespace t))
       (add-hook 'mu4e-compose-mode-hook #'init-mu4e/show-trailing-whitespace)
     #+END_SRC

     If a spellcheck program is loaded, enable spellcheck with ~flyspell-mode~.

     #+BEGIN_SRC emacs-lisp
       (defun init-mu4e/enable-flyspell-mode ()
         (flyspell-mode 1))
       (when ispell-program-name
         (add-hook 'mu4e-compose-mode-hook #'init-mu4e/enable-flyspell-mode))
     #+END_SRC

** Load evil-mu4e
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package evil-mu4e
       :demand                      ; do not defer loading

       :after        ; load the parent package after the following packages
       (evil mu4e)

       :config
       ;; Mark messages for a later action.
       (evil-define-key 'motion mu4e-headers-mode-map "*" 'mu4e-headers-mark-for-something))
   #+END_SRC

** Attachment Reminders
   The following code is taken from Marcin Borkowski's 2016-02-06 post [[http://mbork.pl/2016-02-06_An_attachment_reminder_in_mu4e]["An attachment reminder in mu4e"]].
   Borkowski's post links to the [[https://github.com/mbork/message][mbork/message]] repository on GitHub as the host for the attachment reminder code.
   Interestingly, the repository appears to contain neither the attachment code nor any commits that hint at the code having ever been committed into the repository's mbork-message package.
   Despite the attachment code never having (publicly) been a part of mbork/message, the code is attributed here to Borkowsi under the same GPLv2 license as mbork-message.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun mbork/message-attachment-present-p ()
       "Return t if an attachment is found in the current message."
       (save-excursion
	 (save-restriction
	   (widen)
	   (goto-char (point-min))
	   (when (search-forward "<#part" nil t)
	     t))))

     (defcustom mbork/message-attachment-intent-re
       (regexp-opt '("attachment"
		     "attached") )
       "If this regex is matched then the message should have an attachment.")

     (defcustom mbork/message-attachment-reminder
       "Are you sure you want to send this message without any attachment? "
       "The question asked when trying to send a message with a missing attachment.")

     (defun mbork/message-warn-if-no-attachments ()
       "Ask if the user wants to send even though the message has no attachment."
       (when (and (save-excursion
		    (save-restriction
		      (widen)
		      (goto-char (point-min))
		      (re-search-forward mbork/message-attachment-intent-re nil t)))
		  (not (mbork/message-attachment-present-p)))
	 (unless (y-or-n-p mbork/message-attachment-reminder)
	   (keyboard-quit))))

     (add-hook 'message-send-hook #'mbork/message-warn-if-no-attachments)
   #+END_SRC

** Add Attachments at Ends of Buffers
   =mml-attach-file=, the function used in =mu4e:compose= mode to add attachments to mail, adds the specified file where =point= happens to be.
   [[http://emacs.1067599.n8.nabble.com/Why-does-mml-attach-file-put-the-attachment-at-the-very-end-of-the-message-td373798.html][This thread]], authored by Marcin Borkowski, explores the problems that attachments anywhere but the end of a message buffer can cause.
   In light of that, it is desirable to only /ever/ insert attachments at the end of the buffer.
   This can be accomplished by advising =mml-attach-file= to automatically move and restore =point=.
   Borkowsi provided code to do so in [[http://mbork.pl/2015-11-28_Fixing_mml-attach-file_using_advice][a blog post]].

   The license of the post's code does not appear to be posted anywhere on Borkowski's blog.
   I have reached out to Borkowski asking about how he would like the code to be licensed.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun mml-attach-file--go-to-eob (orig-fun &rest args)
       "Go to the end of the buffer before attaching files."
       (save-excursion
	 (save-restriction
	   (widen)
	   (goto-char (point-max))
	   (apply orig-fun args))))

     (advice-add 'mml-attach-file :around #'mml-attach-file--go-to-eob)
   #+END_SRC

** Ending Boilerplate
  #+BEGIN_SRC emacs-lisp :tangle yes
    (provide 'init-mu4e)
    ;;; init-mu4e.el ends here
  #+END_SRC
