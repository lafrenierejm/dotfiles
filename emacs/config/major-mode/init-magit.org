#+TITLE: Magit Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz

* License
  All code sections in this file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains my configuration for [[https://magit.vc/][Magit]], an Emacs-centric Git porcelain.
  This file is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].

* Code
** Introductory Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     ;;; init-magit.el --- Configuration for Magit

     ;;; Commentary:
     ;; This file is tangled from init-magit.org.
     ;; Changes made here will be overwritten by changes to that Org-mode file.

     ;;; Code:
   #+END_SRC

** Dependencies
   #+BEGIN_SRC emacs-lisp :tangle yes :padline no
     (require 'use-package)
   #+END_SRC

** Load ~magit~
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package magit
       ;; Only load `magit' if the following sexp's Boolean evaulation is t.
       :if
       <<magit/if>>

       ;; Load `magit' after the following packages.
       :after (validate)

       ;; Add the following keybindings.
       :bind
       ("C-x g" . magit-status)

       ;; Evaluate the following code after loading `magit'.
       :config
       <<magit/config>>)
   #+END_SRC

*** Conditional Loading (~:if~)
    :PROPERTIES:
    :DESCRIPTION: Only load ~magit~ if this code evaluates to non-~nil~.
    :HEADER-ARGS: :noweb-ref magit/if
    :END:

    ~magit~ is an interface for Git.
    As such, it is worthless if =git= is not in the user's ~$PATH~.

    #+BEGIN_SRC emacs-lisp
      (executable-find "git")
    #+END_SRC

*** Post-Load Execution (~:config~)
    :PROPERTIES:
    :HEADER-ARGS: :noweb-ref magit/config
    :DESCRIPTION: The code in this section shall be evaluated after ~magit~ has been loaded.
    :END:

**** Suppress Messages
    Suppress the message about ~magit-auto-revert-mode~.

    #+BEGIN_SRC emacs-lisp
      (validate-setq magit-no-message '("Turning on magit-auto-revert-mode..."))
    #+END_SRC

**** Return After Commit
    Return to the main Magit window after closing a commit message, regardless of whether that message is committed or aborted.

    #+BEGIN_SRC emacs-lisp
      ;; Close commit message buffer after commit.
      (defadvice git-commit-commit (after move-to-magit-buffer activate)
        (delete-window))
      ;; Close commit message buffer after abort.
      (defadvice git-commit-abort (after move-to-magit-buffer activate)
        (delete-window))
    #+END_SRC

**** Comparable Version Number
     The function ~magit-version~ provided by Magit does not return a version string that is comparable using Emacs's built-in ~version<~.
     However, Magit's semver is /par/ of the string returned by ~magit-version~;
     it is everything before the first hyphen.

     #+BEGIN_SRC emacs-lisp
       (defun init-magit/version ()
         "Return Magit's version for use in comparisons."
         (car (split-string (magit-version) "-")))
     #+END_SRC

**** Add a Section for Ignored Files
     It is sometimes useful to be able to add ignored files (those that match a rule in =.gitignore=).
     To this end, a new section adding ignored files will be added to Magit's main status buffer.
     Starting in release 2.12.2, Magit includes a built-in function to add such a section

     #+BEGIN_SRC emacs-lisp
       (push #'magit-insert-ignored-files magit-status-sections-hook)
     #+END_SRC

** Load magithub
   [[https://github.com/vermiculus/magithub][magithub]] provides Magit-based interfaces to GitHub's API.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package magithub
       ;; Load this package eagerly.
       :demand

       ;; Load this package after the following packages.
       :after (magit)

       ;; Evaluate the following code after loading this package.
       :config
       (magithub-feature-autoinject t))
   #+END_SRC

** Load ~evil-magit~
    ~[[https://github.com/emacs-evil/evil-magit][evil-magit]]~ configures Evil and Magit to play well together.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package evil-magit
       ;; Load this package eagerly.
       :demand

       ;; Load this package after the following packages.
       :after (evil magit validate)

       :hook
       ((magit-mode) . evil-local-mode)

       ;; Evaluate the following code after loading this package.
       :config
       ;; Start `evil-magit' in the motion state.
       (validate-setq evil-magit-state 'motion)
       ;; Enable Evil's horizontal movement in magit buffers.
       (setq evil-magit-want-horizontal-movement t))
   #+END_SRC

** Ending Boilerplate
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-magit)
     ;;; init-magit.el ends here
   #+END_SRC
