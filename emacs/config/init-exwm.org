#+TITLE: EXWM Configuration
#+AUTHOR: Joseph M LaFreniere (lafrenierejm)
#+EMAIL: joseph@lafreniere.xyz
#+PROPERTY: header-args+ :comments link
#+PROPERTY: header-args+ :tangle no

* License
  All code sections in this =.org= file are licensed under [[https://gitlab.com/lafrenierejm/dotfiles/blob/master/LICENSE][an ISC license]] except when otherwise noted.
  All prose in this file is licensed under [[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] except when otherwise noted.

* About This File
  This file contains configuration for [[https://github.com/ch11ng/exwm][Emacs X Window Manager (EXWM)]].
  It is written in the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]].

* Code
** Introductory Boilerplate					   :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;; init-exwm.el --- Customization for EXWM

     ;;; Commentary:
     ;; This file is tangled from init-exwm.org.
     ;; Changes made here will be overwritten by changes to that Org-mode file.

     ;;; Code:
   #+END_SRC

** Specify Dependencies						   :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'general)
     (require 'use-package)
   #+END_SRC

** Load EXWM
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
     (use-package exwm
       ;; Do not load the package lazily.
       :demand

       ;; Add the following function hooks.
       :gfhook
       <<exwm/gfhook>>

       ;; Execute the following code after the package has been loaded.
       :config
       <<exwm/config>>)
   #+END_SRC

*** Non-Auto-Loading Hooks (~:gfhook~)
    :PROPERTIES:
    :HEADER-ARGS+: :noweb-ref exwm/gfhook
    :END:

    Hide the mode line for these classes:
    - Firefox


    #+BEGIN_SRC emacs-lisp
      ('exwm-manage-finish-hook
       (defun init-exwm/hide-mode-line ()
	 "Hide the mode line in special buffers"
	 (when (string-match "Firefox" exwm-class-name)
	   (exwm-layout-hide-mode-line))))
    #+END_SRC

    Use the window names of the application as its buffers' names for these application classes:
    - Firefox


    #+BEGIN_SRC emacs-lisp
      ('exwm-update-title-hook
       (defun init-exwm/update-title ()
	 (when (string-match "Firefox" exwm-class-name)
	   (exwm-workspace-rename-buffer exwm-title))))
    #+END_SRC

    Add simulation keys for Firefox windows.

    #+BEGIN_SRC emacs-lisp
      ('exwm-manage-finish-hook
       (defun init-exwm/set-firefox-simulation-keys ()
	 (when (and exwm-class-name (string= exwm-class-name "Firefox"))
	   (exwm-input-set-local-simulation-keys
	    '(([\?C-t] . [\?C-n])
	      ([\?C-q] . [\?C-w]))))))
    #+END_SRC

*** Post-Load Execution (~:config~)
    :PROPERTIES:
    :HEADER-ARGS+: :noweb-ref exwm/config
    :END:
    Only enable a single workspace.
    Buffer switching with [[https://github.com/abo-abo/swiper][Ivy]] is preferred to using multiple workspaces.

    #+BEGIN_SRC emacs-lisp
      (setq exwm-workspace-number 1)
    #+END_SRC

    Hide the modeline in floating X windows.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'exwm-floating-setup-hook #'exwm-layout-hide-mode-line)
      (add-hook 'exwm-floating-exit-hook #'exwm-layout-show-mode-line)
    #+END_SRC

**** Keybindings
     Effective use of EXWM requires the ability to return from ~char-mode~ to ~line-mode~.
     This will be performed with =M-r=.

     #+BEGIN_SRC emacs-lisp
       ;; Return to `line-mode'.
       (exwm-input-set-key (kbd "M-r") #'exwm-reset)
     #+END_SRC

     From any window, regardless of its buffer contents/mode, I want to be able to
     - move focus to a different window,
     - close the current window and kill its buffer,
     - close the current window without killing its buffer, and
     - run a shell command.


     Because Chromebooks have neither Super nor Hyper meta keys, the above keybindings shall use Meta prefixes.
     Keybindings using Meta are allowed by convention to be rebound by major and minor modes.
     The keybindings for the above actions must not be overridden, so they are added to ~overriding-local-map~.

     #+BEGIN_SRC emacs-lisp
       ;; Move between windows.
       (exwm-input-set-key (kbd "M-j") #'windmove-down)
       (exwm-input-set-key (kbd "M-h") #'windmove-left)
       (exwm-input-set-key (kbd "M-l") #'windmove-right)
       (exwm-input-set-key (kbd "M-k") #'windmove-up)
       ;; Close the current window and kill its buffer.
       (exwm-input-set-key (kbd "M-Q") #'kill-buffer-and-window)
       ;; Close the current window, leaving its buffer open.
       (exwm-input-set-key (kbd "M-q") #'delete-window)
       ;; Close other windows.
       (exwm-input-set-key (kbd "M-o") #'delete-other-windows)
       ;; Run a shell command.
       (exwm-input-set-key (kbd "M-d") #'init-exwm/start-process)
       ;; Open Eshell in the current directory.
       (exwm-input-set-key (kbd "C-z") #'init-eshell/find-eshell-here)
     #+END_SRC

     Launching applications is performed by calling =start-process-shell-command=.

     #+BEGIN_SRC emacs-lisp
       ;; Launch applications.
       (defun init-exwm/start-process (command)
	 "Start a process via a shell command."
	 (interactive (list (read-shell-command "$ ")))
	 (start-process-shell-command command nil command))
     #+END_SRC

** Ending Boilerplate						   :noexport:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (provide 'init-exwm)
     ;;; init-exwm.el ends here
   #+END_SRC
